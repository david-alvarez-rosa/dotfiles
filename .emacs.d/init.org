#+TITLE: GNU Emacs Configuration
#+LANGUAGE: en
#+AUTHOR: David Álvarez Rosa
#+EMAIL: david@alvarezrosa.com
#+DESCRIPTION: My personal GNU Emacs configuration file.
#+PROPERTY: header-args :tangle yes


GNU Emacs is a free (as in /freedom/) +operating system+ text editor, created
by GNU Project founder Richard Matthew Stallman. I've been using this
magnificent piece of software daily for years now and I can assure you that
is--without a doubt--the best multi-purpose program ever written,
over-performing any other so-called text editors, such as Vi(m)--the editor of
the beast-- or, even worse, Microsoft VS Code malware, among others. I consider
myself a member of the Church of Emacs, my only religion, and I'm a firmly
believer in St. I-GNU-cius--who is a saint, but not a virgin--and to whom I
pray daily. In my day-to-day life I try to stick to the FOSS philosophy, while
living a life of moral chastity and purity, pursuing sainthood mainly through
extensively using org-mode.

There are some people out there that don't really get the meaning and purpose
of Emacs. They think that it is just another bloated text editor that doesn't
adhere to the KISS principle or the Unix philosophy. It is not. First, it is
not a text editor, it is a Lisp interpreter (actually, Elisp), a
Turing-complete programming language (therefore, offering limitless
possibilities). Secondly, there is no contradiction between using Emacs and
KISS or Unix philosophy: Emacs--at least for me--is a container for
"do-one-thing-and-do-it-well" packages that behave similarly, I find no
conflict here. Lastly, Emacs is a gift from God.


* Package Management
Add MELPA package repositories.
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

=use-package= will be used for general package management. Ensure it is
installed and load the package.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+end_src

Always ensure that all package are installed when starting Emacs. If a
particular package does not exist, it will be installed automagically.
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src


* Default Settings Configuration
This section contains all configuration related to main settings for built-in
Emacs features.

** Server Mode
Start the Emacs server mode from this instance, so that all =emacsclient= calls
are routed here. This way, files can be sent to the current Emacs instance,
instead of opening a new one (much faster).
#+begin_src emacs-lisp
  (server-start)
#+end_src

** File Management
Configuration related to file management.

*** Dired Mode
Dired is the main mode for Emacs file-manager operations. The name “Dired”
stands for “directory editor”.

Dired buffer can be modified by making them editable presing =C-x C-q=. With
this is posible to bulk-rename files, or to change file ownerships and
privileges, just thinking about the file listing as an (Emacs) editable text
file.

Show file sizes in a human readable style.
#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+end_src

Ability to use =a= to visit a new directory or file in Dired instead of using
=RET=. =RET= works just fine, but it will create a new buffer for every
interaction whereas =a= reuses the current buffer.
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

*** File Backups and Autosaves
Keep backups and autosaves in the "temp" directory. Take into account that this
is a dangerous option with respect the disappearance of files, but I always use
version control for important projects, so that is not a problem for me.
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

*** Auto Revert Mode
When a file is modified from outside Emacs, automatically revert the
corresponding buffer.
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Buffer Management
Buffers, in Emacs terminology, hold the contents that display/edit in
windows. This are the configurations I use.

Ignore some buffers when using Ivy to switch buffer (see below for Ivy
settings). I am ignoring all buffers with =*= asterisks, that denote that they
do not have a file. While using Ivy is always possible to list all buffers
pressing =C-c C-a=, but probably you won't need this, since Ivy will display
ignored buffers when there is no match.
#+begin_src emacs-lisp
  (setq ivy-ignore-buffers '("\\` " "\\`\\*"))
#+end_src

*** Ibuffer Mode
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on
buffers much in the same manner as Dired. The most important Ibuffer features
are highlighting and various alternate layouts. Ibuffer is part of Emacs since
version 22.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Start in expert mode (without asking for confirmation).
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src

Kill current buffer without asking for which buffer to kill.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

*** Kill All Function
Kill all buffers except current and *scratch*. Useful for "restarting" Emacs
without closing it.
#+begin_src emacs-lisp
  (defun david/kill-all-other-buffers ()
    "Kill all buffers except current and *scratch*."
    (interactive)
    (delete-other-windows)
    (setq scratch (get-buffer "*scratch*"))
    (mapc 'kill-buffer (delq scratch (delq (current-buffer) (buffer-list)))))
#+end_src

** Window Management
Faster commands for cycling windows: =M-o= instead of =C-x o= (one key press
less) and =M-O= for reverse window cycling.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (defun david/reverse-window-cycling ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "M-O") 'david/reverse-window-cycling)
#+end_src

Split and follow for creating new windows.
#+begin_src emacs-lisp
  (defun david/split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'david/split-and-follow-horizontally)

  (defun david/split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'david/split-and-follow-vertically)
#+end_src

New bind for killing buffer *and* window at the same time. To do this press
=C-x C-k=, by default is bind to =C-x 4 0=, that is far more complex.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-k") 'kill-buffer-and-window)
#+end_src

*** Wind Move
Is built into Emacs (since version 21). It lets you move point from window to
window using =Shift= and the arrow keys. This is easier to type than =C-x o=
and, for some users, may be more intuitive.
#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src

*** Winner Mode
Global minor mode that allows to “undo” and “redo” changes in window
configuration. It is included in GNU Emacs.
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Change yes/no Questions to y/n
Shorter and faster.
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Narrowing
Narrowing buffers is very useful, however this commands are disabled by default
because new users often find them confusing. However, this configuration is
*not* for newbies, so enable them.
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'LaTeX-narrow-to-environment 'disabled nil)
#+end_src

I use =C-x n n= for narrowing to region and then =C-x n p= for reverting to
full page, but there are more narrow functions (enviroment dependent).

** Upcase/Downcase Region
Command for upcasing =C-x C-u= or downcasing =C-x C-l= current region are also
disabled by default, enable them.
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+end_src

** Auto Fill Mode
Long lines are a bad practice. Please, don't use them, I find them quite
annoying. Stick to at most 80 characters. Use =M-q= for filling paragraphs when
editing (i.e., always ensure the =fill-column= limit).
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 79)
#+end_src

** Subword Mode
Emacs treats camelCase strings as a single word by default, change this
behaviour.
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Scrolling
I personally don't like automatic scrolling (centering point vertically in the
window when point moves out of the visible portion of the text) so I have it
disabled (just set the following number to a large number, greater than 100).
#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
#+end_src

Set keys for forward/backward between paragraphs.
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-M-n") 'forward-paragraph)
  (define-key global-map (kbd "C-M-p") 'backward-paragraph)
#+end_src

** Character Pairs
It can be useful to insert parentheses, braces, quotes and the like in matching
pairs, e.g., pressing “(” inserts "()", with the cursor in between.
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src

Highlight matching braces.
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** Ediff
Ediff provides a convenient way for simultaneous browsing through the
differences between a pair (or a triple) of files or buffers. The files being
compared, are shown in separate windows and the differences are highlighted as
you step through them. You can also copy difference regions from one buffer to
another (and recover old differences if you change your mind). Another powerful
feature is the ability to merge a pair of files into a third buffer.

Don't open new frame for setup window and prefer splitting horizontally.
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src

** Custom File
Place all custom-defined variables in their own file and store the custom
variable file in the local machine’s home directory outside of version
control. This enables us to keep specific config local to each machine.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file t)
#+end_src


* General
Esta sección contiene diferentes ajustes que no forman parte de Emacs, pero que
no son específicos de ningún modo.

** Keybinding Panel =which-key=
Nice utility for displaying available keybindings in a popup panel. You get an
overview of what keybindings are available based on the prefix keys you
entered.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish)
#+end_src

** Completion Inteface
After years using Helm I have decided to switch to Ivy, Counsel and Swiper as
completion framework.

Ivy is the generic completion mechanism for Emacs and aims to be more
efficient, smaller, simpler, and smoother to use compared to other completion
schemes yet highly customizable.
#+begin_src emacs-lisp
  (use-package ivy
    :init (ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-initial-inputs-alist nil))
#+end_src

Counsel is a collection of Ivy-enhanced versions of common Emacs commands, i.e,
takes Ivy completion framework even further providing versions of common Emacs
commands that are customised to make the best use of Ivy.
#+begin_src emacs-lisp
  (use-package counsel
    :init (counsel-mode))
#+end_src

Swiper is an alternative to isearch that uses Ivy to show an overview of all
matches.
#+begin_src emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+end_src

Some useful commands for the Ivy/Counsel/Swiper framework that I use are =M-i=
for inserting current candidate to minibuffer and =C-r= for recursive
completion session through the command's history (works like in a Bash
session). Also =M-o= for showing all the possible options/actions and =S-SPC=
for deleting the current input, and reseting the candidates list to the
currently restricted matches (narrowing search).

** Expand region
Expand region increases the selected region by semantic units. Just keep
pressing the key until it selects what you want. Expand region is done by
pressing ~C-=~ and contracting by prefixing the shortcut with a negative
argument argument, i.e., ~C-- C-=~.
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . 'er/expand-region))
#+end_src

** Snippets
YASnippets is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all)
    :hook (prog-mode . yas-minor-mode))
#+end_src

** TODO =dired-narrow=
Permite filtrar directorios en =dired=, usar =/= para comenzar y =g= para volver
a vista normal.
#+begin_src emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("/" . 'dired-narrow-fuzzy)))
#+end_src

** Company Mode
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.
#+begin_src emacs-lisp
  (use-package company
    :config (setq company-show-quick-access t)
    :init (global-company-mode)
    :bind ("C-:" . company-complete))
#+end_src

Completion will start automatically after you type a few letters. Use =M-n= and
=M-p= to select, =RET= to complete or =TAB= to complete the common part. Search
through the completions with =C-s=, =C-r= and =C-o=. Press =M-(digit)= to
quickly complete with one of the first 10 candidates.

** TODO =winum=
Numera las diferentes ventanas para facilitar el movimiento entre las mismas.
#+begin_src emacs-lisp :tangle no
  (use-package winum
    :bind (("C-`" . 'winum-select-window-by-number)
           ("C-²" . 'winum-select-window-by-number)
           ("M-0" . 'winum-select-window-0-or-10)
           ("M-1" . 'winum-select-window-1)
           ("M-2" . 'winum-select-window-2)
           ("M-3" . 'winum-select-window-3)
           ("M-4" . 'winum-select-window-4)
           ("M-5" . 'winum-select-window-5)
           ("M-6" . 'winum-select-window-6)
           ("M-7" . 'winum-select-window-7)
           ("M-8" . 'winum-select-window-8))
    :config (setq winum-auto-setup-mode-line nil)
    (winum-mode))
#+end_src

** TODO Spell Checking
Corrector (configurado en español). Para buscar siguiente error =C-,= y para
autocorregir con otras palabras =C-.=
#+begin_src emacs-lisp
  (setq ispell-dictionary "english")
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
#+end_src


* Interface
Settings related to interface.

** Theme
I am using Doom Themes. I find creating own theme is too much work and it's now
worth your time. In the past I used Spacemacs theme and I was nice, but I
became bored of it. Doom Themes provides nice themes such as =doom-one=,
=doom-one-ligth=, and the classic =zenburn= of course.
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-zenburn t)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Modeline
For the modeline I am using also Doom Modeline. This package requires the fonts
included with =all-the-icons= to be installed.
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

** Font
Set default font. I'm currently using Hack (in the past I used Inconsolata).
#+begin_src emacs-lisp
  (set-frame-font "Hack 9")
#+end_src

** Basic Interface Settings
Settings related to built-in enhancements of the UI that do not depend on any
external package.

*** Disable Menus and Scrollbars
Disable tool bar, menu bar and scroll bar. All three are very ugly and
unnecesary. Might be handy for normies, but not for chad Emacs users.
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

*** Remove Startup Screen
Inhibit lame startup screen.
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+end_src

*** Highlight Cuurrent Line
Pretty nice UI enhancement for finding current line. It does not look good in
the terminal version of Emacs, though, so it's not set there.
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src

** Transparency Alpha
Functions for cycling between transparency alpha levels (deactivated, medium or
high).
#+begin_src emacs-lisp
  (setq david/alpha-level 0)
  (defun david/cycle-transparency ()
    "Cycle transparency levels, between deactivated, medium or high."
    (interactive)
    (if (equal david/alpha-level 0)
        (progn (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
           (setq david/alpha-level 1))
      (if (equal david/alpha-level 1)
      (progn (set-frame-parameter (selected-frame) 'alpha '(90 . 80))
             (setq david/alpha-level 2))
        (if (equal david/alpha-level 2)
        (progn (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
           (setq david/alpha-level 0)))
        )))
  (david/cycle-transparency)
  (define-key global-map (kbd "C-c t") 'david/cycle-transparency)
#+end_src

** TODO Centered Buffer
Utility to center buffer (distraction-free editing).
#+begin_src emacs-lisp :tangle no
  (use-package sublimity
    :config
    (require 'sublimity-attractive)
    (setq sublimity-attractive-centering-width 90))
#+end_src


* Programación
** General
*** Tabulador
Configurar el tamaño del tabulador a 2 espacios.
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Usar 2 espacios en vez de un tabulador.
#+begin_src emacs-lisp
  (setq-default tab-width 2 indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
#+end_src

*** Eliminar espacios inútiles
Eliminar espacios al final de linea al guardar.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** TODO Corrección de sintaxis
Habilitar corrección de sintaxis al momento usando =flycheck=
(http://www.flycheck.org/).
#+begin_src emacs-lisp :tangle no
  (use-package flycheck
    :init
    (add-hook 'prog-mode-hook 'global-flycheck-mode)
    :diminish)
#+end_src

*** =Projectile=
Añadir el Projectile.
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode +1)
    :bind (:map projectile-mode-map ("C-c p" . 'projectile-command-map)))
#+end_src

*** TODO Comentarios
https://github.com/vincekd/comment-tags

comment-tags highlights and lists comment tags such as ‘TODO’, ‘FIXME’, ‘XXX’.

Commands (prefixed by C-c t):

b to list tags in current buffer (comment-tags-list-tags-buffer).
a to list tags in all buffers (comment-tags-list-tags-buffers).
s to jump to tag in current buffer by a word or phrase using reading-completion (comment-tags-find-tags-buffer).
n to jump to next tag from point (comment-tags-next-tag).
p to jump to previous tag from point (comment-tags-previous-tag).
(setq comment-tags-keymap-prefix (kbd "C-c t"))
(with-eval-after-load "comment-tags"
  (setq comment-tags-keyword-faces
        `(("TODO" . ,(list :weight 'bold :foreground "#DF5427"))
          ("FIXME" . ,(list :weight 'bold :foreground "#DF5427"))
          ("BUG" . ,(list :weight 'bold :foreground "#DF5427"))
          ("HACK" . ,(list :weight 'bold :foreground "#DF5427"))
          ("KLUDGE" . ,(list :weight 'bold :foreground "#DF5427"))
          ("XXX" . ,(list :weight 'bold :foreground "#DF5427"))
          ("INFO" . ,(list :weight 'bold :foreground "#1FDA9A"))
          ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
  (setq comment-tags-comment-start-only t
        comment-tags-require-colon t
        comment-tags-case-sensitive t
        comment-tags-show-faces t
        comment-tags-lighter nil))
(add-hook 'prog-mode-hook 'comment-tags-mode)

** TODO C/C++
*** TODO =company-c-headers=
Autocompletar los /headers/.
#+begin_src emacs-lisp :tangle no
  (use-package company-c-headers
    :defer t
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/8.2.1/"))
#+end_src

** Python
Paquete para mejorar y facilitar la edición de Python.
#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable))
#+end_src

This is from the documentation.

Once installed, Elpy will automatically provide code completion, syntax error
highlighting and code hinting (in the modeline) for python files. Elpy offers a
lot of features, but the following keybindings should be enough to get started:
- =C-c C-c= evaluates the current python script (or region if something is
selected) in an interactive python shell. The python shell is automatically
displayed aside of your script.
- =C-RET= evaluates the current statement (current line plus the following
  nested lines).
- =C-c C-z= switches between your script and the interactive shell.
- =C-c C-d= displays documentation for the thing under cursor. The documentation
  will pop in a different buffer, that can be closed with q.

Moving around and indenting is similar to Org mode.

Some more things that are pretty sweet.
- =M-.= go to definition.
- =M-*= go back from definition where I was.
- =C-c C-o= occur definition. All places where a function/class is used.

*** Virtual environments
For handling Python virtual environments, we will use
#+begin_src emacs-lisp :tangle no
  (use-package pyenv-mode
    :init
    (pyenv-mode))
#+end_src

** Web Development
=web-mode= Para editar PHP-HTML-CSS-JS.
#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (setq web-mode-markup-indent-offset 2))
#+end_src

** Octave/Matlab
Open Matlab files (.m) in Octave mode by default.
#+begin_src emacs-lisp
  (setq auto-mode-alist
        (cons '("\\.m$" . octave-mode) auto-mode-alist))
#+end_src

** R
Añadir paquete ESS ("Emacs Speaks Statistics") para editor código de R.
#+begin_src emacs-lisp
  (use-package ess
    :config
    (require 'ess-r-mode)
    (define-key ess-r-mode-map ";" 'ess-cycle-assign)
    (define-key inferior-ess-r-mode-map ";" 'ess-cycle-assign))
#+end_src

** =Magit=
Es una interfaz completa de Git (control de versiones) para Emacs.
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . 'magit-status))
#+end_src


* Org Mode
** Configuración de listas
Considerar 'a)', 'A' y 'A)' como listas de elementos.
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

** Indent Mode
Launch org mode in indent mode.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Speed Commands
Activate single letter commands at beginning of a headline.
#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

This is very useful for navigating/modifying org mode files. I usually use
=n=/=p= for next/previous, =b=/=f= for backward/forward, and =l=/=r= for
left/right.

** Refile
Configuration for refiling command =C-c w=.
#+begin_src emacs-lisp
  (setq org-refile-targets '((nil :maxlevel . 2)
                                  (org-agenda-files :maxlevel . 2)))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)
#+end_src

** Capture templates
Permitir tomar notas rápidamente.
#+begin_src emacs-lisp
  (setq org-default-notes-file "~/Documents/Tasks.org")
  (define-key global-map (kbd "C-c c") 'org-capture)
#+end_src

Set my custom capture templates. Brief description of them:
- Standalone Tasks: main template for TODO tasks.
- Email Tasks: template for capturing emails I need to reply to (with link of
  course).
- Link Tasks: similar to standalone tasks, but with link (e.g., email or Elfeed
  link).
- Text: tempalte for taking quick notes.
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Standalone Tasks" entry
           (file+headline "~/Documents/Tasks.org" "Standalone Tasks")
           "* TODO [#C] %?" :empty-lines-before 1 :empty-lines-after 2)
          ("e" "Email" entry
           (file+headline "~/Documents/Tasks.org" "Email Tasks")
           "* TODO [#C] Reply: %a"
           :immediate-finish t :empty-lines-before 1 :empty-lines-after 2)
          ("l" "Link" entry
           (file+headline "~/Documents/Tasks.org" "Email")
           "* TODO [#C] %a" :empty-lines-before 1 :empty-lines-after 2)
          ("o" "Text" entry
           (file+headline "~/Documents/Notes.org" "Varios")
           "* %?" :empty-lines-before 1 :empty-lines-after 2)))
#+end_src

** Keywords
Custom todo keywords. I use them as follows:
- TODO: task that needs to be done (in order, depending priority).
- WAIT: I am waiting for something that does not depend on myself (i.e,
  something external).
- NEXT: todo task, that is on-going or is next task to be done.
- DONE: task is done.
- CANCELLED: task is cancelled.
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)" "|"
                    "DONE(d)" "CANCELLED(c)")))
#+end_src

** Code Evaluation
Allow code blocks in these languages to be evaluated with =C-c C-c=.
#+begin_src emacs-lisp
  (eval-after-load "org"
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((C . t)
           ;; (C++ . t)
           (python . t)
           (latex . t)
           (matlab . t)
           (shell . t)
           (css . t)
           (calc . t)
           (R . t)
           (js . t))))
#+end_src

Don't ask for confirmation for evaluating code.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Interfaz
Configurar la posición de las etiquetas.
#+begin_src emacs-lisp :tangle no
  (setq org-tags-column -72)
#+end_src

Cambiar los puntos suspensivos.
#+begin_src emacs-lisp :tangle no
  (setq org-ellipsis " ⚡")
#+end_src

Configurar opciones para guardar las interacciones.
#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src

Configurar colores para las diferentes prioridades.
#+begin_src emacs-lisp :tangle no
  (setq org-priority-faces '((65 :foreground "#e45649" :weight bold :face bold)
                             (66 :foreground "#dc752f" :weight bold :face bold)
                             (67 :foreground "#0098dd" :weight bold :face bold)))
#+end_src

Restore windows after quitting org agenda.
#+begin_src emacs-lisp
  (setq org-agenda-restore-windows-after-quit t)
  ;; (setq org-agenda-window-setup "current-window")
#+end_src

*** TODO =org-bullets=
Cambia los asteriscos por bolas. Aquí mirar el paquete =org-superstar= que es
una versión moderna de este. Y mirar qué lista de bolas poner.
#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook(lambda () (org-bullets-mode)))
    (setq org-bullets-bullet-list '("✙" "○" "✜" "✿")))
#+end_src

** Agenda
Gestionar los diferentes archivos para la Agenda.
#+begin_src emacs-lisp
  (setq org-agenda-files (quote
                          ("~/Documents/Contactos/Cumpleaños.org"
                          "~/Documents/UPC/Cuatrimestre 9/UPC.org"
                          ;; "~/Documents/UPC/Cuatrimestre 9/Schedule.org"
                          "~/Documents/Notes.org"
                          "~/Documents/Career/Career.org"
                          "~/Documents/Tasks.org")))
#+end_src

Comando para abrir la agenda en cualquier modo.
#+begin_src emacs-lisp
  ;; (defun david/org-agenda-current-week()
  ;;   "Abrir la agenda de la semana."
  ;;   (interactive)
  ;;   (if (not (equal buffer-file-name "~/Documents/Notes.org"))
  ;;       (progn (delete-other-windows)
  ;;              (find-file "~/Documents/Notes.org")
  ;;              (next-line 8)
  ;;              (org-forward-heading-same-level 5)
  ;;              (david/split-and-follow-vertically)
  ;;              (org-agenda nil "n")
  ;;              (other-window 1))
  ;;     (progn (delete-other-windows)
  ;;            (david/split-and-follow-vertically)
  ;;            (org-agenda nil "n"))))
  (defun david/org-agenda-current-week()
    "Abrir la agenda de la semana."
    (interactive)
    (org-agenda nil " "))
  (global-set-key (kbd "C-c a") 'david/org-agenda-current-week)

  (defun david/org-agenda-current-day ()
    "Abrir la agenda en agenda en pequeño y horizontal con el día actual."
    (interactive)
    ;; (david/split-and-follow-horizontally)
    ;; (shrink-window 8)
    (org-agenda nil "d"))
  (global-set-key (kbd "C-c d") 'david/org-agenda-current-day)
#+end_src

Configurar agenda personalizada.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("n" "Agenda and all TODOs without schedule"
           ((agenda "" ((org-agenda-tag-filter-preset (quote ("-SCH")))))
            (alltodo "" ((org-agenda-tag-filter-preset (quote ("-SCH"))))))
           ((org-agenda-start-with-log-mode t)))
          ("d" "Current day"
           ((agenda "" ((org-agenda-span 'day)))))
          (" " "Agenda"
           ((agenda ""
                    ((org-agenda-start-on-weekday nil)
                     (org-agenda-span 3)
                     ;; (org-agenda-start-day "-3d")
         (org-agenda-overriding-header "Main Week Agenda (Scheduled and Deadline Tasks)")
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'regexp ":HABIT:"))))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next")
                   (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (todo "WAIT"
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (tags-todo "TODO=\"TODO\"+PROJECT"
                       ((org-agenda-overriding-header "Projects")
                        (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (tags-todo "TODO=\"TODO\"-PROJECT-HABIT-SOMEDAY"
                       ((org-agenda-overriding-header "Standalone Tasks")
                        (org-agenda-skip-function
                         '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (agenda ""
                    ((org-agenda-span 'day)
                     (org-agenda-overriding-header "Daily Habits Agenda")
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'notregexp ":HABIT:")))))
           ((org-agenda-start-with-log-mode t)))))
#+end_src

Configurar el número de días para mostrar un /deadline/. Dejarlo en una semana
(7 días).
#+begin_src emacs-lisp
  (setq org-deadline-warning-days 7)
#+end_src

With =q= bury agenda instead of killing it (faster of course).
#+begin_src emacs-lisp
(setq org-agenda-sticky t)
#+end_src

Utilizar =o= en la agenda para abrir los links en vez de para ampliar la
ventana.
#+begin_src emacs-lisp
  (require 'org-agenda)
  (define-key org-agenda-mode-map "o" 'org-agenda-open-link)
#+end_src

*** Habits
Show a nice graph for recurring habits. See [[https://orgmode.org/manual/Tracking-your-habits.html][Tracking your Habits]] in the
Org-mode manual for more information.
#+begin_src emacs-lisp
  (require 'org-habit)
#+end_src

** Archive
Set default org archive location.
#+begin_src emacs-lisp
  (setq org-archive-location "~/Documents/Archive//%s::")
#+end_src


* Edición de documentos
** Markdown Mode
Major mode for editting Markdown-formatted text.
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

** LaTeX
Configuración de LaTeX con AUCTeX.
Siempre en modo matemático.
#+begin_src emacs-lisp :tangle no
  (use-package auctex
    :config
    ;; Always in math mode
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    ;; Set PDF viewer to pdf-tools with correlation
    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    ;; Close pairs automagically (electric behavior)
    (setq  LaTeX-electric-left-right-brace t)
    :bind (
           :map LaTeX-mode-map
           ;; Command for cleaning auxiliary files
           ("C-x M-k" . 'TeX-clean))
    )
#+end_src

Usar =reftex=.
- =C-c= show ToC.
- =C-c (= create label.
- =C-c )= reference label.
- =C-c [= create cite.
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-toc-split-windows-fraction 0.2)
#+end_src

#+begin_src emacs-lisp
  (setq LaTeX-item-indent 0)
#+end_src

*** Compilación
Compilar con =-shell-escape= siempre.
#+begin_src emacs-lisp
  (setq TeX-command-extra-options "-shell-escape -synctex=1")
#+end_src

No preguntar para guardar y actualizar el /pdf/ después de compilar.
#+begin_src emacs-lisp
  (setq TeX-save-query nil)
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src

*** BibTeX
For managing .bib files. Use =C-c C-c=. Insert entries templates with different
key bindings. Also, =C-c C-f= for inserting new field.
#+begin_src emacs-lisp
  (setq bibtex-align-at-equal-sign t)
  (setq bibtex-entry-format `(opts-or-alts required-fields
                              numerical-fields whitespace realign
                              last-comma delimiters unify-case
                              braces sort-fields))
  (setq bibtex-autokey-year-title-separator ":")
#+end_src


* PDF Viewer
Usar =pdf-tools= como visor de PDF y configurar los diferentes comandos de
movimiento.

PDF Tools PDF Tools is, among other things, a replacement of DocView for PDF
files. The key difference is that pages are not pre-rendered by
e.g. ghostscript and stored in the file-system, but rather created on-demand
and stored in memory.

Disable here Swiper for searching, and fallback to Isearch, since Swiper
searchs in the source code rather than in the PDF itself.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    :bind (:map pdf-view-mode-map
                ("C-s" . 'isearch-forward)))
#+end_src

Slices are really useful:
- =s r= reset slice.
- =s m= set slice with mouse.
- =s b= set slice using bounding box.

* Music Player
Para controlar la reproducción de música desde Emacs. Debe estar instalado
=mpd= (Music Player Daemon) e interactuaremos con él haciendo uso del cliente
=mpc= construido en Emacs.

Para lanzarlo usar el comando =C-c m= ("m" de music) y luego quitarlo siempre
con =q=.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m") 'mpc)
#+end_src

Algunos comandos para facilitar la interacción.
#+begin_src emacs-lisp
  (require 'mpc)
  (define-key mpc-mode-map "a" 'mpc-playlist-add)
  (define-key mpc-mode-map "l" 'mpc-playlist)
  (define-key mpc-mode-map "d" 'mpc-playlist-delete)
#+end_src


* Correo electrónico
Configuración del correo electrónico (con =mu4e=). Abrir directamente los
recibidos con =C-x m=.
#+begin_src emacs-lisp
  (require 'mu4e)
  (setq mail-user-agent 'mu4e-user-agent)
  (defun david/open-mu4e-inbox ()
    "Mostrar los correos de todas las cuentas de los últimos 7
  días.  Abre mu4e en pantalla completa, cerrando el resto de
  ventanas, guarda en el registro la configuración."
    (interactive)
    (window-configuration-to-register :mu4e-fullscreen)
    (mu4e-headers-search "date:7d..now")
    (delete-other-windows))
  (define-key global-map (kbd "C-x m") 'david/open-mu4e-inbox)

  (defun david/mu4e-quit-session ()
    "Restores the previous window configuration and kills the mu4e buffer."
    (interactive)
    (kill-buffer)
    (jump-to-register :mu4e-fullscreen))

  (define-key mu4e-headers-mode-map (kbd "q") 'david/mu4e-quit-session)
  (define-key mu4e-main-mode-map (kbd "q") 'david/mu4e-quit-session)

  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it)
#+end_src

Configuración del tamaño máximo de columna
#+begin_src emacs-lisp
  (setq message-fill-column 72)
#+end_src

** Cuentas
Definición de las diferentes cuentas de correo electrónico.
#+begin_src emacs-lisp
  (setq mu4e-maildir "~/.mail")
  (setq mu4e-user-mail-address-list '("david@alvarezrosa.com"
                                     "david.alvarez.rosa@yandex.com"))
  ;; Cuenta predeterminada.
  (setq mu4e-inbox-folder "/David/Inbox"
        mu4e-drafts-folder "/David/Drafts"
        mu4e-sent-folder "/David//Sent"
        mu4e-trash-folder "/David/Inbox/Trash"
        user-full-name "David Álvarez Rosa"
        user-mail-address "david@alvarezrosa.com"
        smtpmail-starttls-credentials '(("alvarezrosa.com" 587 nil nil))
        smtpmail-default-smtp-server "alvarezrosa.com"
        smtpmail-smtp-server "alvarezrosa.com"
        smtpmail-smtp-service 587
        mu4e-sent-messages-behavior 'sent)
  (defvar david/mu4e-account-alist
    '(("David"
       (user-full-name "David Álvarez Rosa")
       (mu4e-inbox-folder "/David/Inbox")
       (mu4e-sent-folder "/David/Sent")
       (mu4e-drafts-folder "/David/Drafts")
       (mu4e-trash-folder "/David/Inbox/Trash")
       (smtpmail-stream-type nil)
       (user-mail-address "david@alvarezrosa.com")
       (smtpmail-starttls-credentials '(("alvarezrosa.com" 587 nil nil)))
       (smtpmail-default-smtp-server "alvarezrosa.com")
       (smtpmail-smtp-server "alvarezrosa.com")
       (smtpmail-smtp-service 587)
       (mu4e-sent-messages-behavior sent))
      ("Yandex"
       (user-full-name "David Álvarez Rosa")
       (mu4e-inbox-folder "/Yandex/Inbox")
       (mu4e-sent-folder "/Yandex/Sent")
       (mu4e-drafts-folder "/Yandex/Drafts")
       (mu4e-trash-folder "/Yandex/Trash")
       (smtpmail-stream-type ssl)
       (user-mail-address "david.alvarez.rosa@yandex.com")
       (starttls-use-gnutls t)
       (smtpmail-smtp-server "smtp.yandex.com")
       (smtpmail-smtp-service 465)
       (mu4e-sent-messages-behavior sent))))
#+end_src

Configurar las carpetas dinámicamente (dependiendo de la cuenta de correo).
#+begin_src emacs-lisp
  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ((string-match "^/Yandex.*"
                          (mu4e-message-field msg :maildir))
            "/Yandex/Junk")
           ((string-match "^/david.*"
                          (mu4e-message-field msg :maildir))
           "/David/Inbox/Junk"))))

  (setq mu4e-trash-folder
        (lambda (msg)
          (cond
           ((string-match "^/Yandex.*"
                          (mu4e-message-field msg :maildir))
            "/Yandex/Trash")
           ((string-match "^/david.*"
                          (mu4e-message-field msg :maildir))
           "/David/Inbox/Trash"))))
#+end_src

** Atajos
Añadir atajos de teclado para ir a las diferentes carpetas de las diferentes
cuentas.
#+begin_src emacs-lisp
  (setq mu4e-maildir-shortcuts
        '(("/David/Inbox" . ?i)
          ("/David/Sent" . ?s)
          ("/David/Inbox/Trash" . ?t)
          ("/David/Drafts" . ?d)
          ("/David/Inbox/Junk" . ?j)
          ("/Yandex/Inbox" . ?I)
          ("/Yandex/Sent" . ?S)
          ("/Yandex/Trash" . ?T)
          ("/Yandex/Drafts" . ?D)
          ("/Yandex/Spam" . ?J)
          ("/Yandex/All Mail" . ?A)
          ("/Queue" . ?q)))
#+end_src

Añadir configuraciones personalizadas de marcadores.
#+begin_src emacs-lisp
  (defvar inbox-folders (string-join '("maildir:/David/Inbox"
                                       "maildir:/Yandex/Inbox")
                                     " OR "))

  (defvar draft-folders (string-join '("maildir:/David/Drafts"
                                       "maildir:/Yandex/Drafts")
                                     " OR "))

  (defvar spam-folders (string-join '("maildir:/David/Inbox/Junk"
                                      "maildir:/Yandex/Spam")
                                    " OR "))

  (setq mu4e-bookmarks
  '(("date:today..now" "Today's messages" ?t)
         ("date:7d..now" "Last 7 days" ?w)
         ("flag:flagged" "Flagged" ?f)
         ("mime:image/*" "Messages with images" ?p)
         (spam-folders "All spambuckets" ?S)
         (draft-folders "All drafts" ?d)
         (inbox-folders "All inbox mails" ?i)
         ("flag:unread" "Unread messages" ?u)))
#+end_src

** Correos en cola
Permite guardar los correos en cola (bandeja de salida) para enviarlos más
adelante. Útil cuando se está trabajando sin conexión a internet por ejemplo.
#+begin_src emacs-lisp
  (setq smtpmail-queue-dir "~/.mail/Queue/cur")

  (defun david/toggle-mail-queue ()
    "Permite conmutar entre cola de correos activda o desactivada."
    (interactive)
    (if smtpmail-queue-mail
        (setq smtpmail-queue-mail nil)
        (setq smtpmail-queue-mail t)))
  (define-key mu4e-main-mode-map (kbd "C-c q") 'david/toggle-mail-queue)
#+end_src

** Encriptación
Encriptar todos los correos salientes /automágicamente/ si la llave existe.
#+begin_src emacs-lisp :tangle no
  (defun david/can-encrypt-message-p ()
    "Return non-nil if current message can be encrypted.
  I.e., the keyring has a public key for each recipient."
    (let ((recipients
           (seq-map #'cadr ; only take email address, not recipient name
                    (seq-mapcat (lambda (header)
                                  (let ((header-value
                                         (message-fetch-field header)))
                                    (and header-value
                                         (mail-extract-address-components header-value
                                                                          t))))
                                '("To" "CC" "BCC"))))
          (context (epg-make-context epa-protocol)))
      (seq-every-p (lambda (recipient)
                     (not (seq-empty-p (epg-list-keys context recipient))))
                   recipients)))

  (defun david/add-encryption-mark-if-possible ()
    "Add MML tag to encrypt message when there is a key for each
  recipient."
    (when (david/can-encrypt-message-p)
      (mml-secure-message-sign-encrypt)))

  (add-hook 'message-send-hook #'david/add-encryption-mark-if-possible)
#+end_src

Para firmar correos salientes.
#+begin_src emacs-lisp
  (setq mml-secure-openpgp-sign-with-sender t)
#+end_src

** Autocompletado
Permitir el autocompletado estándar. Y solo tener en cuenta el autocompletado
con los correos de hace como mucho 6 meses.
#+begin_src emacs-lisp
  (setq mu4e-compose-complete-addresses t)
  (setq mu4e-compose-complete-only-after
        (format-time-string
         "%Y-%m-%d"
         (time-subtract (current-time) (days-to-time 150))))
#+end_src

Personalizar el autcompletado de correos (con =M + tab=).
#+begin_src emacs-lisp
  (setq david/contact-file "~/Documents/Contactos/Correos.txt")
  (defun david/read-contact-list ()
    (with-temp-buffer
      (insert-file-contents david/contact-file)
      (split-string (buffer-string) "\n" t)))
  (defun david/complete-emails ()
    (interactive)
    (helm :sources `(((name . "Email address candidates")
                     (candidates . david/read-contact-list)
                     (action . (("insert" . (lambda (x)
                                              (insert
                                               (mapconcat
                                                'identity
                                                (helm-marked-candidates)
                                                ", "))))))))
    :input (word-at-point)
    :buffer "*helm complete email*"))
  (define-key mu4e-compose-mode-map (kbd "<M-tab>") 'david/complete-emails)
#+end_src

** Composición
Usar =C-c x= para pasar a =org-mu4e-compose=, que permite componer correos
usando =org-mode=. Después, convertir el mensaje en =org= a HTML (al enviar).
#+begin_src emacs-lisp
  (require 'org-mu4e)
  (define-key mu4e-compose-mode-map (kbd "C-c x") 'org-mu4e-compose-org-mode)
  (setq org-mu4e-convert-to-html t)
#+end_src

Añadir =org-mime= para poder convertir de =Org= a HTML (para mandar LaTeX como
imágenes por ejemplo).
#+begin_src emacs-lisp
  (use-package org-mime)
  (require 'org-mime)
#+end_src

Añadir automáticamente la firma.
#+begin_src emacs-lisp
  (setq message-signature-file "~/.emacs.d/signature.txt")
  (setq mu4e-compose-signature-auto-include nil)
#+end_src

Activar el autocorrector en español al estar en modo de composición.
#+begin_src emacs-lisp
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda ()
                                      (ispell-change-dictionary "spanish")))
#+end_src


Configurar la línea de cita.

#+begin_src emacs-lisp

  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  (setq message-citation-line-format "On %a %d %b %Y at %R, %f wrote:")
#+end_src


Forzar que no se corten las lineas al enviar los correos.
#+begin_src emacs-lisp :tangle no
  (setq fill-flowed-encode-column 79)
  (setq fill-flowed-display-column 79)

  (add-hook 'mu4e-compose-mode-hook 'enriched-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines 1 'always)))

  (defun david/mu4e-remove-soft-breaks ()
    "Remove the soft breaks that occur with auto-fill-mode."
    (interactive)
    (mu4e-compose-goto-bottom)
    (call-interactively 'set-mark-command)
    (mu4e-compose-goto-top)
    (set-fill-column (point-max))
    (call-interactively 'fill-paragraph)
    (set-fill-column 79))
  (define-key mu4e-compose-mode-map (kbd "C-c s") 'david/mu4e-remove-soft-breaks)
  (define-key mu4e-compose-mode-map (kbd "M-q") 'fill-paragraph)
#+end_src

Configuración para manjear más de una cuenta a la hora de enviar correo. Esta
función es de la documentación de MU4E
([[http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html#Multiple-accounts]]). Siempre
que se quiera componer un nuevo correo, cambiar toda las variables de
configuración relevantes a la cuenta elegida.
#+begin_src emacs-lisp
  (defun david/mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  david/mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) david/mu4e-account-alist)
                               nil t nil nil (caar david/mu4e-account-alist))))
           (account-vars (cdr (assoc account david/mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'david/mu4e-set-account)
#+end_src

** Archivos adjuntos
Configuración el directorio de descarga.
#+begin_src emacs-lisp
  (setq mu4e-attachment-dir "~/Downloads")
#+end_src

Mejorar la gestión de los archivos adjuntos (con =dired=).
#+begin_src emacs-lisp
  (require 'gnus-dired)
  (defun gnus-dired-mail-buffers ()
    "Devuelve una lista de las ventanas con mensajes activos."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))
  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src

** Imágenes
Configurar cómo se muestran las imágenes en =mu4e=
#+begin_src emacs-lisp
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
  (setq mu4e-view-show-images t)
#+end_src

** Correos HTML
#+begin_src emacs-lisp
  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  ;;(setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

Hacer más probable el mostrar correos como texto.
#+begin_src emacs-lisp
  (setq mu4e-view-html-plaintext-ratio-heuristic  most-positive-fixnum)
#+end_src

** Otros
Configuraciones varias.
#+begin_src emacs-lisp
  ;; Eliminar los 'buffers' de mensajes.
  (setq message-kill-buffer-on-exit t)
  ;; Usar 'U' para actualizar en principal.
  (setq mu4e-get-mail-command "mbsync -a -V")
  ;; Usar 'C-c u' para actualizar (solo indexando).
  (define-key mu4e-headers-mode-map (kbd "C-c u") 'mu4e-update-index)
#+end_src

Usar tabulador para moverse entre links.
#+begin_src emacs-lisp
  (bind-key "<tab>" 'shr-next-link mu4e-view-mode-map)
  (bind-key "<backtab>" 'shr-previous-link mu4e-view-mode-map)
#+end_src

Mostrar las fechas en formato europeo. Y las horas en formato de 24 horas.
#+begin_src emacs-lisp
(setq mu4e-headers-time-format "  %H:%M")
#+end_src

No mostrar correos relacionados, esto se puede cambiar con =W=.
#+begin_src emacs-lisp
  (setq mu4e-headers-include-related nil)
#+end_src

Mostrar las direcciones de correo completadas cuando en modo de lectura.
#+begin_src emacs-lisp
(setq mu4e-view-show-addresses t)
#+end_src


* Gestor de suscripciones
Usaremos =elfeed= para gestionar las suscripciones, es un lector de
/feeds/ de RSS y Atom.
#+begin_src emacs-lisp
  (use-package elfeed
    :bind ("C-c e" . 'elfeed)
    :config (setq elfeed-db-directory "~/.emacs.d/elfeed"
                  elfeed-search-filter "@1-week-ago -no "
                  elfeed-search-title-max-width 100))
#+end_src

Automáticamente ajustar a =fill-column= las entradas al abrirlas. Sobreescribe
la función predetermianda.
#+begin_src emacs-lisp
  (setq shr-use-fonts nil)
  (setq shr-width 70)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun david/elfeed-search-show-entry ()
    "Show elfeed entry and fill the text to fill-column."
    (interactive)
    (elfeed-search-show-entry (elfeed-search-selected :single))
    (read-only-mode 0)
    (mark-whole-buffer)
    (call-interactively 'fill-paragraph))
  (define-key elfeed-search-mode-map (kbd "RET") 'david/elfeed-search-show-entry)
#+end_src

TODO: Actualizar automáticamente al abrir Emacs.
#+begin_src emacs-lisp
  ;; (add-hook 'emacs-startup-hook 'elfeed-update)
#+end_src

** =elfeed-org=
Ayuda a gestionar 'elfeed' con 'org-mode'.
#+begin_src emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/Suscripciones.org")))
#+end_src

** =elfeed-goodies=
Otro paquete más para =elfeed= (para la interfaz).
#+begin_src emacs-lisp
  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup)
    (setq elfeed-goodies/entry-pane-size 0.38
          elfeed-goodies/entry-pane-position 'right
          elfeed-goodies/feed-source-column-width 18
          elfeed-goodies/tag-column-width 22
          elfeed-goodies/powerline-default-separator nil))
#+end_src

** Funciones
Abrir vídeos de la /feed/ de =elfeed= usando =mpv=.
#+begin_src emacs-lisp
  (defun david/elfeed-play-with-mpv ()
    (interactive)
    (setq entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
    (message "Opening %s with mpv..." (elfeed-entry-link entry))
    (start-process "elfeed-mpv" nil "mpv" "--ytdl-format=[height<=1080]" (elfeed-entry-link entry))
    (elfeed-search-untag-all-unread))
  (define-key elfeed-show-mode-map (kbd "o") 'david/elfeed-play-with-mpv)
  (define-key elfeed-search-mode-map (kbd "o") 'david/elfeed-play-with-mpv)

  (defun david/elfeed-play-with-mpv-with-quality ()
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
          (quality-arg "")
          (quality-val (completing-read "Max height resolution (0 for unlimited): " '("1080" "720" "480" "0") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
        (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry)))
    (elfeed-search-untag-all-unread))
  (define-key elfeed-show-mode-map (kbd "O") 'david/elfeed-play-with-mpv-with-quality)
  (define-key elfeed-search-mode-map (kbd "O") 'david/elfeed-play-with-mpv-with-quality)
#+end_src

Ignorar la entrada actual (concretamente, añadir la TAG =no=).
#+begin_src emacs-lisp
  (defun david/elfeed-ignore ()
    (interactive)
    (setq entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
    (setq tag (intern "no"))
    (elfeed-tag entry tag)
    (elfeed-search-update-entry entry)
    (forward-line))
    ;; (elfeed-search-update--force))
  (define-key elfeed-show-mode-map (kbd "i") 'david/elfeed-ignore)
  (define-key elfeed-search-mode-map (kbd "i") 'david/elfeed-ignore)
#+end_src


* Configuraciones antiguas
** =htmlize=
Convierte un buffer o un archivo a HTML (respetando estilo).
#+begin_src emacs-lisp :tangle no
  (use-package htmlize)
#+end_src

** =ace-window=
Mejorar la gestión de ventanas, especialmente cuando hay más de 2.
#+begin_src emacs-lisp :tangle no
  (use-package ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src


* Pendiente
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c i") (lambda () (interactive)
                                  (erc :server "irc.freenode.net"
                                       :port "6667"
                                       :nick "davidLinux")))

  (setq erc-prompt-for-password nil)
  (setq erc-fill-function 'erc-fill-static)

  ;; (setq erc-fill-static-center 22)

  ;; (require 'erc-join)
  ;; (setq erc-autojoin-channels-alist
  ;;       '(("freenode.net" "#thoughtbot" "#emacs" "#emacsnyc")))
  ;; (erc-autojoin-enable)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq golden-ratio-auto-scale t)

(setf (cdr (assq 'continuation fringe-indicator-alist))
      '(nil nil) ;; no continuation indicators
      ;; '(nil right-curly-arrow) ;; right indicator only
      ;; '(left-curly-arrow nil) ;; left indicator only
      ;; '(left-curly-arrow right-curly-arrow) ;; default
      )

(setf (cdr (assq 'truncation fringe-indicator-alist))
      '(nil nil) ;; no continuation indicators
      )
#+end_src

** TODO Very nice scrolling with keyboard
#+begin_src emacs-lisp
  ;;scroll window up/down by one line
  (global-set-key (kbd "M-n") 'scroll-up-line)
  (global-set-key (kbd "M-p") 'scroll-down-line)
#+end_src
