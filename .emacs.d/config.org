#+TITLE: GNU Emacs Configuration
#+LANGUAGE: en
#+AUTHOR: David Álvarez Rosa
#+EMAIL: david@alvarezrosa.com
#+DESCRIPTION: My personal GNU Emacs configuration file.


GNU Emacs is a free (as in /freedom/) ~operating system~ text editor, created
by GNU Project founder Richard Matthew Stallman. I've been using this
magnificent piece of software daily for years now and I can assure you that
is--without a doubt--THE best multi-purpose program ever written,
over-performing any other so-called text editors (such as Vi(m)--the editor of
the beast-- or, even worse, Microsoft VSCode malware, among others). I consider
myself a member of the Church of Emacs, as my only religion, and I'm a firmly
believer in St.\ IGNUcius. In my day-to-day life I try to stick to the FOSS
philosophy, while living a life of purity, pursuing sainthood mainly through
extensively using org-mode.


* Gestión de paquetes
** Definición de los repositorios
Añadimos los diferentes repositorios para descargar paquetes (entre ellos
Melpa). No inicializamos =Package.el=.
#+begin_src emacs-lisp
  ;;; config.el --- Configuración de Emacs de David Álvarez -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;   - Toda la configuración se encuentra en 'config.org'.
  ;;; Code:

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
         ("melpa" . "https://melpa.org/packages/")))
#+end_src

** Gestor de paquetes
Usaremos =use-package= para facilitar la gestión de paquetes.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

Siempre forzaremos que todos los paquetes estén instalados al iniciar Emacs.
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src


* Configuración ajustes estándar
Esta sección contiene las configuraciones para las carácterísticas que forman
parte de Emacs.

** Hacer Emacs más rápido
Aumentar /garbage-collection/, que hace Emacs más rápido al iniciarse.
#+begin_src emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)
#+end_src

Similarmente, desactivar (temporalmente) =file-name-handler-alist=.
#+begin_src emacs-lisp
  (defvar david/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src

** Servidor de Emacs
Iniciar el servidor de Emacs al iniciar.
#+begin_src emacs-lisp
  (use-package server
    :defer 15
    :ensure nil ; Forma parte de Emacs.
    :config (server-start))
#+end_src

** No crear copias de seguridad
#+begin_src emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil)
#+end_src

** =dired-mode=
Permitir usar =a= para abrir un nuevo directorio en vez de =RET=. =RET= crea un
nueva ventana /todas/ las veces, =a= usa la misma ventana.
#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

Mostrar tamaños en unidades fáciles de leer.
#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+end_src

** Preguntar y/n en vez de yes/no
Permite confirmar opciones más rápido.
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Actualizar automáticamente
Cuando algo cambia en un archivo, automáticamente actualizarlo.
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Interfaz
*** Quitar barras y menús inútiles
No mostrar la barra de menú, de herramientas ni la barra de desplazamiento.
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

*** Desactivar pantalla de inicio
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+end_src

*** Sombreado
Sombrear la línea donde está el cursor (solo en GUI).
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode t))
#+end_src

*** Símbolos
Para que aparezcan símbolos (solo en GUI).
#+begin_src emacs-lisp :tangle no
  (when window-system (global-prettify-symbols-mode t))
#+end_src

*** Fechas
Mostrar las fechas en formato europeo.
#+begin_src emacs-lisp
  (setq calendar-date-style (quote european))
#+end_src

** Comandos desactivados
Activar algunos comandos que están desactivados.
#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'LaTeX-narrow-to-environment 'disabled nil)
#+end_src

** Truncar lineas
Truncar líneas demasiado largas automáticamente (a partir de 79 caracteres).
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 79)
#+end_src

Usar =visual-line= para una mejor gestión de las lineas demasiado largas que no
entran en la pantalla.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook (lambda () (setq visual-line-mode t)))
#+end_src

** Sobreescribir lo seleccionado
#+begin_src emacs-lisp
  (pending-delete-mode t)
#+end_src

** Configurar separadores
Considerar las mayúsculas como separador de palabras.
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Gestión de ventanas
Usar un comando más sencillo para cambiar entre ventanas.
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (defun david/reverse-window-cycling ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "M-O") 'david/reverse-window-cycling)
#+end_src

*** =windmove=
Esta construido dentro de Emacs. Permite moverse entre ventanas usando =Shift= y
las flechas del teclado.
#+begin_src emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

*** =winner-mode=
Permite deshacer y reacer entre configuraciones de ventanas con los comandos
=C-c left= y =C-c right= para deshacer y rehacer respectivamente.
#+begin_src emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+end_src

*** =ibuffer=
Para mejorar la gestión de las ventanas.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

En modo experto siempre, no pedir confirmación.
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src

** Desplazamiento
Cambiar el modo de desplazamiento para no centrar la pantalla.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

Moverse entre párrafos fácilmente.
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-M-n") 'forward-paragraph)
  (define-key global-map (kbd "C-M-p") 'backward-paragraph)
#+end_src

** Paréntesis
Colorea los paréntesis en parejas al pasar por encima.
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

Cerrar las parejas automáticamente (excepto en LaTeX, usa AUCTeX).
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\' . ?\')
                              (?\" . ?\")))
  (electric-pair-mode t)
  (eval-after-load "latex"
    (electric-pair-mode nil))
#+end_src

** =ediff=
Configurar cómo se comparta =ediff=. No abrir una nueva ventana para el control
y dividir los archivos horizontalmente.
#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq ediff-split-window-function 'split-window-horizontally)
#+end_src

Al terminar dejar las ventanas como estaban.
#+begin_src emacs-lisp
  ;; (add-hook 'ediff-after-quit-hook-internal 'winner-undo)
#+end_src

** Terminal
Usar automáticamente bash como terminal por defecto para /ansi-term/.
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+end_src

Configurar comando =M-return= para abrir una terminal.
#+begin_src emacs-lisp
  (global-set-key (kbd "<M-return>") 'ansi-term)
#+end_src

** Archivo de personalizaciones
Crear un archivo diferente para las personalizaciones.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file t)
#+end_src


* General
Esta sección contiene diferentes ajustes que no forman parte de Emacs, pero que
no son específicos de ningún modo.

** =beacon-mode=
https://github.com/Malabarba/beacon
Cuando hay un cambio de ventana o un desplazamiento de ventana, sombreará un
poco el cursor para facilitar la detección del mismo.
#+begin_src emacs-lisp
  (use-package beacon
    :init
    (beacon-mode 1)
    :diminish)
#+end_src

** =popup-kill-ring=
Facilita la gestión de la memoria al copiar y pegar. Muestra las últimas cosas
copiadas.
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+end_src

** =which-key=
Muestra los posibles comandos (que completan la secuencia comenzada)
disponibles.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish)
#+end_src

** =avy=
Permite buscar caracteres fácilmente.
#+begin_src emacs-lisp
  (use-package avy
    :bind ("M-s" . avy-goto-char))
#+end_src

** =undo-tree=
Mejora en deshacer y admite rehacer.
#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode)
    :diminish)
#+end_src

** =multiple-cursors=
Permite edición múltiple (https://github.com/magnars/multiple-cursors.el).
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C-<" . 'mc/mark-all-like-this)
           ("C-S-c C-S-c" . 'nmc/edit-lines))
    :config (define-key mc/keymap (kbd "<return>") nil))
#+end_src

** =rainbow-delimiters=
Colorear los paréntesis de acuerdo con su profundidad.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    :diminish)
#+end_src

** =swiper=
Para mejorar la búsqueda.
#+begin_src emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+end_src

** =hungry-delete=
Borrado de todos los espacios hasta el siguiente caracter.
#+begin_src emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode)
    :diminish)
#+end_src

** =highlight-indent-guides=
Guías para los niveles de indentación. Solo aparecerán las guías para nivel de
indentación > 2.
#+begin_src emacs-lisp :tangle no
  (use-package highlight-indent-guides
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-character ?|)
    (setq highlight-indent-guides-responsive (quote top))
    :diminish)
  (defun david/my-highlighter (level responsive display)
    "Solo mostrar guías para nivel de indentación (LEVEL) > 2."
    (if (> 2 level)
        nil
      (highlight-indent-guides--highlighter-default level responsive display)))
  (setq highlight-indent-guides-highlighter-function 'david/my-highlighter)
#+end_src

** =helm=
Para una mejor gestión de ventanas, búsqueda de archivos y de comandos.
#+begin_src emacs-lisp
  (use-package helm
    :init (helm-mode 1)
    :bind (("C-x C-f" . 'helm-find-files)
           ("C-x b" . 'helm-buffers-list)
           ("M-x" . 'helm-M-x)
           ("C-x C-r" . 'helm-recentf)
           :map helm-map
           ("<M-tab>" . 'helm-execute-persistent-action)
           :map helm-find-files-map
           ;; ("C-b" . 'helm-find-files-up-one-level)
           ("<M-tab>" . 'helm-execute-persistent-action)
           :map helm-buffer-map
           ("<M-tab>" . 'helm-execute-persistent-action))
    :config
    (defun david/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'david/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-m-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-echo-input-in-header-line t
          helm-ff-auto-update-initial-value t
          helm-boring-buffer-regexp-list '("\\` " "\\`\\*helm" "\\`\\*echo area"
                                           "\\`\\*minibuf" "magit" "elfeed" "*Messages*"
                                           "*Ediff Registry*" "*Calculator*" "Calc Trail*"
                                           "*Help*" "Suscripciones.org" "Cumpleaños.org"
                                           "*Calendar*" ".*.synctex.gz")))
#+end_src

Configuraciones extra.
#+begin_src emacs-lisp
  (require 'helm-config)
  (helm-autoresize-mode 1)
#+end_src

** =iedit=
Para tener múltiplos cursores (edición múltiple). Útil para cambiar el nombre de
variables.
#+begin_src emacs-lisp
  (use-package iedit
    :bind ("C-;" . 'iedit-mode))
#+end_src

** =expand-region=
Expande la región seleccionada por regiones semánticas.
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . 'er/expand-region))
#+end_src

** =pretty-symbols=
Convertir algunas palabras en símbolos (solo en GUI).
#+begin_src emacs-lisp :tangle no
  (when window-system
    (use-package pretty-mode
      :config
      (global-pretty-mode t)))
#+end_src

** =sudo-edit=
Para editar en modo de administrador.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :bind ("M-e" . 'sudo-edit))
#+end_src

** =yasnippet=
Ofrece plantillas (configurables) para diferentes modos.
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :config
    (use-package yasnippet-snippets)
    (yas-reload-all)
    :init
    (add-to-list 'load-path
                 "~/.emacs.d/plugins/yasnippet")
    (require 'yasnippet)
    (yas-global-mode 1))
#+end_src

** =fast-scroll=
To ensure scrolling is fast in Emacs, this package disables non-essential things
while windowis being scrolled.
#+begin_src emacs-lisp
  (use-package fast-scroll
    :demand t
    :config
    (add-hook 'fast-scroll-start-hook (lambda () (flycheck-mode -1)))
    (add-hook 'fast-scroll-end-hook (lambda () (flycheck-mode 1)))
    (fast-scroll-config)
    (fast-scroll-mode 1))
#+end_src

** =dired-narrow=
Permite filtrar directorios en =dired=, usar =/= para comenzar y =g= para volver
a vista normal.
#+begin_src emacs-lisp
  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("/" . 'dired-narrow-fuzzy)))
#+end_src

** =company=
Paquete para autocompletar configurado para avanzar y retroceder con los
comandos clásicos de Emacs.
#+begin_src emacs-lisp
  (use-package company
    :config (setq company-idle-delay 1
                  company-minimum-prefix-length 3
                  company-show-numbers t)
    (global-company-mode)
    :bind (("C-:" . company-complete) ; Para no esperar.
           :map company-active-map
           ("M-n" . nil)
           ("M-p" . nil)
           ("C-n" . #'company-select-next)
           ("C-p" . #'company-select-previous)
           ("SPC" . #'company-abort))
    :diminish)
#+end_src

** =winum=
Numera las diferentes ventanas para facilitar el movimiento entre las mismas.
#+begin_src emacs-lisp
  (use-package winum
    :bind (("C-`" . 'winum-select-window-by-number)
           ("C-²" . 'winum-select-window-by-number)
           ("M-0" . 'winum-select-window-0-or-10)
           ("M-1" . 'winum-select-window-1)
           ("M-2" . 'winum-select-window-2)
           ("M-3" . 'winum-select-window-3)
           ("M-4" . 'winum-select-window-4)
           ("M-5" . 'winum-select-window-5)
           ("M-6" . 'winum-select-window-6)
           ("M-7" . 'winum-select-window-7)
           ("M-8" . 'winum-select-window-8))
    :config (setq winum-auto-setup-mode-line nil)
    (winum-mode))
#+end_src

** TODO =paredit=
Paredit is great, it brings structural editing to lisps, maintaining the
syntactical correctness of your code.
[[http://danmidwood.com/content/2014/11/21/animated-paredit.html]]
Básicamente para gestionar las parejas de manera sencilla.
#+begin_src emacs-lisp :tangle no
  (use-package paredit)
  #+end_src

** =linkmarks.el=
Permite gestionar los /bookmarks/ con =org-mode= y añade
funcionalidades extra (especialmente útil para directorios).
#+begin_src emacs-lisp
  ;; (load "~/.emacs.d/linkmarks")
  ;; (setq linkmarks-file "~/.emacs.d/bookmarks.org")
  ;; (define-key global-map (kbd "C-x r b") 'linkmarks-select)
#+end_src

** =flyspell=
Corrector (configurado en español). Para buscar siguiente error =C-,= y para
autocorregir con otras palabras =C-.=
#+begin_src emacs-lisp
  (setq ispell-dictionary "english")
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;; (add-hook 'LaTeX-mode-hook 'flyspell-buffer)
#+end_src


* Tema
Configuración del tema gráfico.
#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :defer t
    :init
    (setq custom-enabled-themes '(spacemacs-dark)
          custom-safe-themes '("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default)))
#+end_src

Estilo de letra.
#+begin_src emacs-lisp :tangle no
  (set-frame-font "Inconsolata 11")
#+end_src

** Barra de estado
Configuración de la barra de estado.
#+begin_src emacs-lisp
  (use-package spaceline
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    ;; (setq spaceline-line-column-p nil)
    ;; (setq spaceline-line-p nil)
    ;; (spaceline-spacemacs-theme)
    (spaceline-emacs-theme)
    (setq powerline-default-separator (quote arrow-fade))
    ;; (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified)
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-hud-off)
    (spaceline-toggle-version-control-off)
    (spaceline-helm-mode)
    (spaceline-info-mode))
  (add-hook 'emacs-startup-hook #'spaceline-compile)
#+end_src

Mostrar la posición del cursor en el texto y la hora.
#+begin_src emacs-lisp
  (setq line-number-mode t
        column-number-mode t
        display-time-24hr-format t
        display-time-format "%d %B %H:%M"
        display-time-default-load-average nil)
  (display-time-mode 1)
#+end_src

Mostrar estado de la batería en la barra.
#+begin_src emacs-lisp
  (use-package fancy-battery
    :config (setq fancy-battery-show-percentage t
                  battery-update-interval 15)
    (if window-system
        (fancy-battery-mode)
      (display-battery-mode t)))
#+end_src

Mostrar posición del cursor de manera gráfica.
#+begin_src emacs-lisp
  (use-package nyan-mode
    :init (nyan-mode 1)
    :config (setq nyan-animate-nyancat t
                  nyan-wavy-trail t)
    (nyan-start-animation))
#+end_src

*** =diminish=
Para no mostar algunos modos menores en la barra de estado.
#+begin_src emacs-lisp
(use-package diminish
  :init
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'auto-revert-mode)
  (diminish 'highlight-indent-guides-mode)
  (diminish 'auto-fill-function)
  (diminish 'org-indent-mode)
  ;; (diminish 'eldoc-mode)
  (diminish 'yas-minor-mode))
#+end_src

** Transparencia
Configurar la transparencia.
#+begin_src emacs-lisp
  (setq transparency_level 0)
  (defun david/cycle-transparency ()
    "Permite cambiar la transparencia entre 3 modos (desactivado, medio, alto)."
    (interactive)
    (if (equal transparency_level 0)
        (progn (set-frame-parameter (selected-frame) 'alpha '(95 . 80))
           (setq transparency_level 1))
      (if (equal transparency_level 1)
      (progn (set-frame-parameter (selected-frame) 'alpha '(90 . 80))
             (setq transparency_level 2))
        (if (equal transparency_level 2)
        (progn (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
           (setq transparency_level 0)))
        )))
  (david/cycle-transparency)
  (define-key global-map (kbd "C-c t") 'david/cycle-transparency)
#+end_src

** Centered buffer
Utility to center buffer (distraction-free editing).
#+begin_src emacs-lisp
  (use-package sublimity
    :config
    (require 'sublimity-attractive)
    (setq sublimity-attractive-centering-width 100))
#+end_src


* Funciones
Varias funciones extras útiles.

** Edición de texto
Eliminar palabra completa (sin importar dónde esté el cursor).
#+begin_src emacs-lisp
  (defun david/kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'david/kill-whole-word)
#+end_src

Copiar una palabra completa (sin importar dónde esté el cursor).
#+begin_src emacs-lisp
  (defun copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w y") 'copy-whole-word)
#+end_src

Eliminar una linea completa (sin importar dónde esté el cursor).
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+end_src

Copiar una línea completa (sin importar dónde esté el cursor).
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l y") 'copy-whole-line)
#+end_src

** Movimiento entre texto
Funciones para mejorar los comandos de movimiento.
#+begin_src emacs-lisp
  (defun david/next-lines ()
    (interactive)
    (next-line 15))
  (global-set-key (kbd "C-v") 'david/next-lines)
  (defun david/previous-lines ()
    (interactive)
    (previous-line 15))
  (global-set-key (kbd "M-v") 'david/previous-lines)
#+end_src

** Gestión de ventanas
Funciones para mejorar la división de la pantalla.
#+begin_src emacs-lisp
  (defun david/split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'david/split-and-follow-horizontally)
  (defun david/split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'david/split-and-follow-vertically)
#+end_src

Función para cerrar las ventanas sin pedir confirmación.
#+begin_src emacs-lisp
  (defun david/kill-curr-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'david/kill-curr-buffer)
#+end_src

Función para cerrar ventana sin pedir confirmación y quitándola.
#+begin_src emacs-lisp
  (defun david/kill-curr-buffer-2()
    (interactive)
    (kill-buffer (current-buffer))
    (delete-window))
  (global-set-key (kbd "C-x C-k") 'david/kill-curr-buffer-2)
#+end_src

Actualizar la otra ventana.
#+begin_src emacs-lisp
  (defun david/update-other-buffer ()
    (interactive)
    (other-window 1)
    (revert-buffer nil t)
    (other-window -1))
#+end_src

** Gestión de /buffers/
Eliminar todos los /buffers/ excepto el actual y el /scratch/ (útil cuando hay
muchos abiertos).
#+begin_src emacs-lisp
  (defun david/kill-all-other-buffers ()
    "Kill all buffers except current and *scratch*."
    (interactive)
    (delete-other-windows)
    (setq scratch (get-buffer "*scratch*"))
    (mapc 'kill-buffer (delq scratch (delq (current-buffer) (buffer-list)))))
#+end_src

** Gestionar configuración
Funciones para abrir y para recargar la configuración.
#+begin_src emacs-lisp
  (defun david/open-config-file()
    "Abrir el archivo de configuración."
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  ;; (global-set-key (kbd "C-c e") 'david/open-config-file)
  (defun david/reload-config()
    "Recargar la configuración automáticamente."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  ;; (global-set-key (kbd "C-c r") 'david/reload-config)
#+end_src


* Programación
** General
*** Indentar automáticamente
Corrige la indentación automáticamente al cambiar de linea con la tecla =RET=.
#+begin_src emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src

*** Compilar
No preguntar por el comando de compilación (siempre será =make -k=), y solo
preguntará si se presiona el comando de copilar con un prefijo numério.
#+begin_src emacs-lisp
  ;; (setq compilation-read-command nil)
#+end_src

Definir comando para compilar.
#+begin_src emacs-lisp
  (global-set-key "\C-x\C-m" 'compile)
#+end_src

*** =nlinum-relative=
Numera lineas de manera relativa solo en modo de programación.
#+begin_src emacs-lisp :tangle no
  (use-package nlinum-relative
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)
    (add-hook 'LaTeX-mode-hook 'nlinum-relative-mode)
    (add-hook 'Octave-mode-hook 'nlinum-relative-mode)
    :diminish)
#+end_src

*** Tabulador
Configurar el tamaño del tabulador a 2 espacios.
#+begin_src emacs-lisp
  (setq-default tab-width 2)
#+end_src

Usar 2 espacios en vez de un tabulador.
#+begin_src emacs-lisp
  (setq-default tab-width 2 indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
#+end_src

*** Eliminar espacios inútiles
Eliminar espacios al final de linea al guardar.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; (add-hook 'before-save-hook '(lambda()
  ;;                               (when (not (derived-mode-p 'org-mode))
  ;;                                 (delete-trailing-whitespace))))
#+end_src

*** Corrección de sintaxis
Habilitar corrección de sintaxis al momento usando =flycheck=
(http://www.flycheck.org/).
#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    (add-hook 'prog-mode-hook 'global-flycheck-mode)
    :diminish)
#+end_src

*** =Projectile=
Añadir el Projectile.
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode +1)
    :bind (:map projectile-mode-map ("C-c p" . 'projectile-command-map)))

  (use-package helm-projectile
    :defer t
    :init (helm-projectile-on))
#+end_src

Añadir el paquete =helm-ag= para buscar en código. Necesario tener instalado el
programa =ag=. En Arch Linux: =pacman -S the_silver_searcher=.
#+begin_src emacs-lisp
  (use-package helm-ag)
#+end_src

*** TODO Comentarios
https://github.com/vincekd/comment-tags

comment-tags highlights and lists comment tags such as ‘TODO’, ‘FIXME’, ‘XXX’.

Commands (prefixed by C-c t):

b to list tags in current buffer (comment-tags-list-tags-buffer).
a to list tags in all buffers (comment-tags-list-tags-buffers).
s to jump to tag in current buffer by a word or phrase using reading-completion (comment-tags-find-tags-buffer).
n to jump to next tag from point (comment-tags-next-tag).
p to jump to previous tag from point (comment-tags-previous-tag).
(setq comment-tags-keymap-prefix (kbd "C-c t"))
(with-eval-after-load "comment-tags"
  (setq comment-tags-keyword-faces
        `(("TODO" . ,(list :weight 'bold :foreground "#DF5427"))
          ("FIXME" . ,(list :weight 'bold :foreground "#DF5427"))
          ("BUG" . ,(list :weight 'bold :foreground "#DF5427"))
          ("HACK" . ,(list :weight 'bold :foreground "#DF5427"))
          ("KLUDGE" . ,(list :weight 'bold :foreground "#DF5427"))
          ("XXX" . ,(list :weight 'bold :foreground "#DF5427"))
          ("INFO" . ,(list :weight 'bold :foreground "#1FDA9A"))
          ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
  (setq comment-tags-comment-start-only t
        comment-tags-require-colon t
        comment-tags-case-sensitive t
        comment-tags-show-faces t
        comment-tags-lighter nil))
(add-hook 'prog-mode-hook 'comment-tags-mode)

** C/C++
#+begin_src emacs-lisp
  (use-package cc-mode
    :defer t)
  #+end_src

*** =company-c-headers=
Autocompletar los /headers/.
#+begin_src emacs-lisp
  (use-package company-c-headers
    :defer t
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/8.2.1/"))
#+end_src

*** Plegar código
Permiter plegar partes de código (mirando parejas de llaves/paréntesis
generalmente) con el comando: =C-c @ C-c= entre otros.
#+begin_src emacs-lisp
  (add-hook 'c-mode-common-hook 'hs-minor-mode)
#+end_src

** Python
Paquete para mejorar y facilitar la edición de Python.
#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable))
#+end_src

This is from the documentation.

Once installed, Elpy will automatically provide code completion, syntax error
highlighting and code hinting (in the modeline) for python files. Elpy offers a
lot of features, but the following keybindings should be enough to get started:
- =C-c C-c= evaluates the current python script (or region if something is
selected) in an interactive python shell. The python shell is automatically
displayed aside of your script.
- =C-RET= evaluates the current statement (current line plus the following
  nested lines).
- =C-c C-z= switches between your script and the interactive shell.
- =C-c C-d= displays documentation for the thing under cursor. The documentation
  will pop in a different buffer, that can be closed with q.

Moving around and indenting is similar to Org mode.

Some more things that are pretty sweet.
- =M-.= go to definition.
- =M-*= go back from definition where I was.
- =C-c C-o= occur definition. All places where a function/class is used.

*** Virtual environments
For handling Python virtual environments, we will use
#+begin_src emacs-lisp :tangle no
  (use-package pyenv-mode
    :init
    (pyenv-mode))
#+end_src

*** Jupyter Notebook
For Jupyter Notebook integration we will use =ein=.
#+begin_src emacs-lisp
    (use-package ein)
#+end_src

Basic usage:
- =C-c C-o= after opening =.ipynb= file for editing as notebook.
- =M-x ein:run= launches a Jupyter process from Emacs.
- =M-x ein:login= connects to a running Jupyter process.
- =C-c C-f= for opening new notebook.

** Web
*** =rainbow-mode=
Subraya los códigos de los colores del color que es.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :defer t
    :init
    (add-hook 'web-mode-hook 'rainbow-mode)
    :diminish)
#+end_src

*** TODO Impatient Mode
Impatient Mode
https://github.com/netguy204/imp.el

Live JavaScript Coding Emacs/Browser: See your changes in the browser as you type

Usage
Enable the web server provided by simple-httpd: M-x httpd-start

Publish buffers by enabling the minor mode impatient-mode: M-x impatient-mode

And then point your browser to http://localhost:8080/imp/, select a buffer, and
watch your changes appear as you type!

*** =web-mode=
Para editar PHP-HTML-CSS-JS.
#+begin_src emacs-lisp
  (use-package web-mode
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (setq web-mode-markup-indent-offset 2))
#+end_src

** Octave
Abrir en el modo correspondiente scripts de Octave.
#+begin_src emacs-lisp
  (setq auto-mode-alist
        (cons
         '("\\.m$" . octave-mode)
         auto-mode-alist))
#+end_src

Configurar el caracter para comentar en Octave.
#+begin_src emacs-lisp
  ;; (setq octave-comment-start "%")
  ;; (setq octave-block-comment-start "%")
#+end_src

** R
Añadir paquete ESS ("Emacs Speaks Statistics") para editor código de R.
#+begin_src emacs-lisp
  (use-package ess
    :config
    (require 'ess-r-mode)
    (define-key ess-r-mode-map ";" 'ess-cycle-assign)
    (define-key inferior-ess-r-mode-map ";" 'ess-cycle-assign))
#+end_src

** TODO p_slides
p_slides is a static files only, dead simple way, to create semantic slides. The
slide content is markdown, embedded in a HTML file. When opening a
presentation.html file, enable markdown-mode.

(add-to-list 'auto-mode-alist '("presentation.html" . markdown-mode))
(add-hook 'markdown-mode-hook 'flyspell-mode)

** TODO Auto Reload Web Sites
Introducing a custom browser-reloading-mode. It’s a quick implementation and not
a real derived mode.

When enabling browser-reloading-mode for a specific buffer, whenever this buffer
is saved, a command-line utility reload_chromium.sh is called. This in turn is a
wrapper around xdotool with which a reloading of the Chromium browser is
triggered.

This is handy when working in a web environment that doesn’t natively support
hot-reloading (static web pages, for instance) and the page has too much
(dynamic) content to be displayed properly in impatient-mode. I’m using it for
example when working on a p_slides slide deck.

(defun reload-chromium ()
  (when enable-browser-reloading
    (shell-command-to-string "reload_chromium.sh")))

(defun browser-reloading-mode ()
  "Finds the open chromium session and reloads the tab"
  (interactive)
  ;; When set, disable the local binding and therefore disable the mode
  (if enable-browser-reloading
      (setq enable-browser-reloading nil)
    ;; Otherwise create a local var and set it to True
    (progn
      (make-local-variable 'enable-browser-reloading)
      (setq enable-browser-reloading t))))

;; By default, disable the guard against using `reload-chromium`
(setq enable-browser-reloading nil)
(add-hook 'after-save-hook #'reload-chromium)

** =Magit=
Es una interfaz completa de Git (control de versiones) para Emacs.
#+begin_src emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . 'magit-status))
#+end_src

** TODO Dumb Jumb
https://github.com/jacktasia/dumb-jump

“Jump to definition” with support for multiple programming languages that favors
“just working”. This means minimal – and ideally zero – configuration with
absolutely no stored indexes (TAGS) or persistent background processes.

Dumb Jump uses The Silver Searcher ag, ripgrep rg, or grep to find potential
definitions of a function or variable under point. It uses a set of regular
expressions based on the file extension, or major-mode, of the current buffer.

(dumb-jump-mode)
(setq dumb-jump-selector 'ivy)
Usage
The one important shortcut is C-M-g which attempts to jump to the definition of
the thing under point.


* Org Mode
** Configuración de listas
Considerar 'a)', 'A' y 'A)' como listas de elementos.
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

** Varios
*** Indentar
Indentar.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

*** Comandos rápidos
Habilitar los comandos rápidos para acciones.
#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
  (setq org-use-speed-commands
        (lambda () (and (looking-at org-outline-regexp) (looking-back "^\**"))))
#+end_src

Habilitar la introdución de bloques como era antiguamente, esto es, usar <KEY
para introducir bloques. Ahora mismo el método recomendado es =C-c C-,= que
ejecuta =org-structure-template-alist=.
#+begin_src emacs-lisp :tangle no
  (require 'org-tempo)
#+end_src

*** =REFILE=
Configurar el /refile/ con =C-c w=.
#+begin_src emacs-lisp
  (setq org-refile-targets '((nil :maxlevel . 1)
                                  (org-agenda-files :maxlevel . 1)))
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path 'file)
#+end_src

*** Captura
Permitir tomar notas rápidamente.
#+begin_src emacs-lisp
  (setq org-default-notes-file "~/Documents/Tasks.org")
  (define-key global-map (kbd "C-c c") 'org-capture)
#+end_src

Plantillas para tomar notas.
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Standalone Tasks" entry
           (file+headline "~/Documents/Tasks.org" "Standalone Tasks")
           "* TODO [#C] %?" :empty-lines-before 1 :empty-lines-after 2)
          ("e" "Email" entry
           (file+headline "~/Documents/Tasks.org" "Email Tasks")
           "* TODO [#C] Reply: %a"
           :immediate-finish t :empty-lines-before 1 :empty-lines-after 2)
          ("l" "Link" entry
           (file+headline "~/Documents/Tasks.org" "Email")
           "* TODO [#C] %a" :empty-lines-before 1 :empty-lines-after 2)
          ("o" "Text" entry
           (file+headline "~/Documents/Notes.org" "Varios")
           "* %?" :empty-lines-before 1 :empty-lines-after 2)))
#+end_src

*** Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)" "|"
                    "DONE(d)" "CANCELLED(c)")))
#+end_src

** Evaluar código
Permitir evaluar código de los siguientes lenguajes.
#+begin_src emacs-lisp
  (eval-after-load "org"
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((C . t)
           ;; (C++ . t)
           (python . t)
           (latex . t)
           (matlab . t)
           (shell . t)
           (css . t)
           (calc . t)
           (R . t)
           (js . t))))
#+end_src

Abrir código fuente (en 'org-mode') sin dividir el 'buffer'.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'reorganize-frame)
#+end_src

No preguntar por confirmación al evaluar código.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Interfaz
Configurar la posición de las etiquetas.
#+begin_src emacs-lisp
  (setq org-tags-column -72)
#+end_src

Cambiar los puntos suspensivos.
#+begin_src emacs-lisp
  (setq org-ellipsis " ⚡")
#+end_src

Mostrar las fechas en formato europeo.
#+begin_src emacs-lisp
  (setq org-time-stamp-custom-formats (quote ("<%d-%m-%y %a>" . "<%d-%m-%y %a %H:%M>")))
  (setq org-display-custom-times t)
#+end_src

Configurar opciones para guardar las interacciones.
#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src

Configurar colores para las diferentes prioridades.
#+begin_src emacs-lisp
  (setq org-priority-faces '((65 :foreground "#e45649" :weight bold :face bold)
                             (66 :foreground "#dc752f" :weight bold :face bold)
                             (67 :foreground "#0098dd" :weight bold :face bold)))
#+end_src

No truncar las lineas demasiado largas (y desactivar =visual-line-mode=).
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines t)))
  (add-hook 'org-mode-hook (lambda () (setq visual-line-mode nil)))
#+end_src

Dejar las ventanas como estaban al quitar y abrir en buffer actual la agenda.
#+begin_src emacs-lisp
  (setq org-agenda-restore-windows-after-quit t)
  ;; (setq org-agenda-window-setup "current-window")
#+end_src

*** =org-bullets=
Cambia los asteriscos por bolas.
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook(lambda () (org-bullets-mode)))
    (setq org-bullets-bullet-list '("✙" "○" "✜" "✿")))
#+end_src

** Agenda
Gestionar los diferentes archivos para la Agenda.
#+begin_src emacs-lisp
  (setq org-agenda-files (quote
                          ("~/Documents/Contactos/Cumpleaños.org"
                          "~/Documents/UPC/Cuatrimestre 9/UPC.org"
                          ;; "~/Documents/UPC/Cuatrimestre 9/Schedule.org"
                          "~/Documents/Notes.org"
                          "~/Documents/Career/Career.org"
                          "~/Documents/Tasks.org")))
#+end_src

Comando para abrir la agenda en cualquier modo.
#+begin_src emacs-lisp
  ;; (defun david/org-agenda-current-week()
  ;;   "Abrir la agenda de la semana."
  ;;   (interactive)
  ;;   (if (not (equal buffer-file-name "~/Documents/Notes.org"))
  ;;       (progn (delete-other-windows)
  ;;              (find-file "~/Documents/Notes.org")
  ;;              (next-line 8)
  ;;              (org-forward-heading-same-level 5)
  ;;              (david/split-and-follow-vertically)
  ;;              (org-agenda nil "n")
  ;;              (other-window 1))
  ;;     (progn (delete-other-windows)
  ;;            (david/split-and-follow-vertically)
  ;;            (org-agenda nil "n"))))
  (defun david/org-agenda-current-week()
    "Abrir la agenda de la semana."
    (interactive)
    (org-agenda nil " "))
  (global-set-key (kbd "C-c a") 'david/org-agenda-current-week)

  (defun david/org-agenda-current-day ()
    "Abrir la agenda en agenda en pequeño y horizontal con el día actual."
    (interactive)
    ;; (david/split-and-follow-horizontally)
    ;; (shrink-window 8)
    (org-agenda nil "d"))
  (global-set-key (kbd "C-c d") 'david/org-agenda-current-day)
#+end_src

Configurar agenda personalizada.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("n" "Agenda and all TODOs without schedule"
           ((agenda "" ((org-agenda-tag-filter-preset (quote ("-SCH")))))
            (alltodo "" ((org-agenda-tag-filter-preset (quote ("-SCH"))))))
           ((org-agenda-start-with-log-mode t)))
          ("d" "Current day"
           ((agenda "" ((org-agenda-span 'day)))))
          (" " "Agenda"
           ((agenda ""
                    ((org-agenda-start-on-weekday nil)
                     (org-agenda-span 3)
                     ;; (org-agenda-start-day "-3d")
         (org-agenda-overriding-header "Main Week Agenda (Scheduled and Deadline Tasks)")
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'regexp ":HABIT:"))))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next")
                   (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (todo "WAIT"
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (tags-todo "TODO=\"TODO\"+PROJECT"
                       ((org-agenda-overriding-header "Projects")
                        (org-agenda-skip-function
                           '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (tags-todo "TODO=\"TODO\"-PROJECT-HABIT-SOMEDAY"
                       ((org-agenda-overriding-header "Standalone Tasks")
                        (org-agenda-skip-function
                         '(org-agenda-skip-entry-if 'deadline 'scheduled))))
            (agenda ""
                    ((org-agenda-span 'day)
                     (org-agenda-overriding-header "Daily Habits Agenda")
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'notregexp ":HABIT:")))))
           ((org-agenda-start-with-log-mode t)))))
#+end_src

Configurar el número de días para mostrar un /deadline/. Dejarlo en una semana
(7 días).
#+begin_src emacs-lisp
  (setq org-deadline-warning-days 7)
#+end_src

With =q= bury agenda instead of killing it (faster of course).
#+begin_src emacs-lisp
(setq org-agenda-sticky t)
#+end_src

Utilizar =o= en la agenda para abrir los links en vez de para ampliar la
ventana.
#+begin_src emacs-lisp
  (require 'org-agenda)
  (define-key org-agenda-mode-map "o" 'org-agenda-open-link)
#+end_src

*** Habits
Show a nice graph for recurring habits. See [[https://orgmode.org/manual/Tracking-your-habits.html][Tracking your Habits]] in the
Org-mode manual for more information.
#+begin_src emacs-lisp
  (require 'org-habit)
#+end_src

** Archivar
Configurar la función de archivo.
#+begin_src emacs-lisp
  (setq org-archive-location "~/.emacs.d/archive/%s::")
#+end_src

** Exportar
Al exportar a iCalendar, incluir los TODO.
#+begin_src emacs-lisp
  ;; (setq org-icalendar-include-todo t)
#+end_src

Añadir el paquete =minted= al exportar LaTeX.
#+begin_src emacs-lisp
  ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; (setq org-latex-listings 'minted)
#+end_src

*** Recargar
Automáticamente recargar el pdf compilado (para LaTeX y para Beamer).
#+begin_src emacs-lisp
(defun david/org-compile-beamer-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-beamer-export-to-pdf)
  (david/update-other-buffer))

(defun david/org-compile-latex-and-update-other-buffer ()
  "Has as a premise that it's run from an org-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (org-latex-export-to-pdf)
  (david/update-other-buffer))

(define-key org-mode-map (kbd "C-c lr") 'david/org-compile-latex-and-update-other-buffer)
(define-key org-mode-map (kbd "C-c br") 'david/org-compile-beamer-and-update-other-buffer)
#+end_src

** Esfuerzo
Ask for an effort estimate when clocking in.
#+begin_src emacs-lisp
  (add-hook 'org-clock-in-prepare-hook
            'david/org-mode-ask-effort)

  (defun david/org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))
#+end_src


* Edición de documentos
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

*** Compilar
Definir función para compilar en Markdown (usando pandoc). Automáticamente
recarga el pdf (con =C-c r=).
#+begin_src emacs-lisp
  (defun david/md-compile ()
    "Compiles the currently loaded markdown file using pandoc into a PDF"
    (interactive)
    (save-buffer)
    (shell-command (concat "pandoc " (buffer-file-name) " -o "
                           (replace-regexp-in-string "md" "pdf" (buffer-file-name)))))

  (defun david/md-compile-and-update-other-buffer ()
    "Has as a premise that it's run from a markdown-mode buffer and the
       other buffer already has the PDF open"
    (interactive)
    (david/md-compile)
    (david/update-other-buffer))

  (eval-after-load 'markdown-mode
    '(define-key markdown-mode-map (kbd "C-c r") 'david/md-compile-and-update-other-buffer))
#+end_src

** LaTeX
Configuración de LaTeX con AUCTeX.
Siempre en modo matemático.
#+begin_src emacs-lisp
  (use-package auctex
    :defer t)

  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+end_src

Usar =reftex=.
- =C-c= show ToC.
- =C-c (= create label.
- =C-c )= reference label.
- =C-c [= create cite.
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-toc-split-windows-fraction 0.2)
#+end_src

Configar el visor de PDF como =pdf-tools=
#+begin_src emacs-lisp
  (setq TeX-view-program-selection (quote
                                    (((output-dvi has-no-display-manager) "dvi2tty")
                                     ((output-dvi style-pstricks) "dvips and gv")
                                     (output-dvi "xdvi")
                                     (output-pdf "PDF Tools")
                                     (output-html "xdg-open"))))
#+end_src

Permitir correlación entre .tex y .pdf.
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
#+end_src

Cerrar parejas automáticamente (por ejemplo: paréntesis).
#+begin_src emacs-lisp
  (setq  LaTeX-electric-left-right-brace t)
#+end_src

Eliminar archivos innecesarios fácilmente.
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()(define-key LaTeX-mode-map (kbd "C-x M-k") 'TeX-clean)))
#+end_src

#+begin_src emacs-lisp
  (setq LaTeX-item-indent 0)
#+end_src

*** Compilación
Compilar con =-shell-escape= siempre.
#+begin_src emacs-lisp
  (setq TeX-command-extra-options "-shell-escape -synctex=1")
#+end_src

No preguntar para guardar y actualizar el /pdf/ después de compilar.
#+begin_src emacs-lisp
  (setq TeX-save-query nil)
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src

*** =outline-mode=
Permite esconder/plegar partes del texto. El prefijo es =C-c @=.
#+begin_src emacs-lisp
  (defun david/turn-on-outline-minor-mode ()
    (outline-minor-mode 1))

  (add-hook 'LaTeX-mode-hook 'david/turn-on-outline-minor-mode)
#+end_src

*** BibTeX
For managing .bib files. Use =C-c C-c=. Insert entries templates with different
key bindings. Also, =C-c C-f= for inserting new field.
#+begin_src emacs-lisp
  (setq bibtex-align-at-equal-sign t)
  ;; (setq bibtex-text-indentation 14)
  ;; (setq bibtex-contline-indentation 5)

  (setq bibtex-entry-format `(opts-or-alts required-fields
                              numerical-fields whitespace realign
                              last-comma delimiters unify-case
                              braces sort-fields))
  (setq bibtex-autokey-year-title-separator ":")
#+end_src


* Visor de PDF
Usar =pdf-tools= como visor de PDF y configurar los diferentes comandos de
movimiento.
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install) ; Iniciar.
    (with-eval-after-load 'pdf-links
      (define-key pdf-links-minor-mode-map (kbd "f") 'image-forward-hscroll))
    (defun david/pdf-tools-previous-lines ()
      (interactive)
      (pdf-view-previous-line-or-previous-page 15))
    (defun david/pdf-tools-next-lines ()
      (interactive)
      (pdf-view-next-line-or-next-page 15))
    :bind (:map pdf-view-mode-map
                ("\C-s" . 'isearch-forward) ; "Swiper" no funciona aquí.
                ;; Mejora en los comandos básicos de movimiento.
                ("n" . 'pdf-view-next-line-or-next-page)
                ("p" . 'pdf-view-previous-line-or-previous-page)
                ("d" . 'david/pdf-tools-next-lines)
                ("u" . 'david/pdf-tools-previous-lines)
                ("f" . 'image-forward-hscroll)
                ("b" . 'image-backward-hscroll)
                ("l" . 'image-forward-hscroll)
                ("h" . 'image-backward-hscroll)
                ("." . 'pdf-view-next-page-command)
                ("," . 'pdf-view-previous-page-command)))
#+end_src

Slices are really useful:
- =s r= reset slice.
- =s m= set slice with mouse.
- =s b= set slice using bounding box.
#+begin_src emacs-lisp
  ;; (add-hook 'pdf-view-mode-hook 'pdf-view-auto-slice-minor-mode)
#+end_src


* Music Player
Para controlar la reproducción de música desde Emacs. Debe estar instalado
=mpd= (Music Player Daemon) e interactuaremos con él haciendo uso del cliente
=mpc= construido en Emacs.

Para lanzarlo usar el comando =C-c m= ("m" de music) y luego quitarlo siempre
con =q=.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m") 'mpc)
#+end_src

Algunos comandos para facilitar la interacción.
#+begin_src emacs-lisp
  (require 'mpc)
  (define-key mpc-mode-map "a" 'mpc-playlist-add)
  (define-key mpc-mode-map "l" 'mpc-playlist)
  (define-key mpc-mode-map "d" 'mpc-playlist-delete)
#+end_src


* Correo electrónico
Configuración del correo electrónico (con =mu4e=). Abrir directamente los
recibidos con =C-x m=.
#+begin_src emacs-lisp
  (require 'mu4e)
  (setq mail-user-agent 'mu4e-user-agent)
  (defun david/open-mu4e-inbox ()
    "Mostrar los correos de todas las cuentas de los últimos 7
  días.  Abre mu4e en pantalla completa, cerrando el resto de
  ventanas, guarda en el registro la configuración."
    (interactive)
    (window-configuration-to-register :mu4e-fullscreen)
    (mu4e-headers-search "date:7d..now")
    (delete-other-windows))
  (define-key global-map (kbd "C-x m") 'david/open-mu4e-inbox)

  (defun david/mu4e-quit-session ()
    "Restores the previous window configuration and kills the mu4e buffer."
    (interactive)
    (kill-buffer)
    (jump-to-register :mu4e-fullscreen))

  (define-key mu4e-headers-mode-map (kbd "q") 'david/mu4e-quit-session)
  (define-key mu4e-main-mode-map (kbd "q") 'david/mu4e-quit-session)

  (require 'smtpmail)
  (setq message-send-mail-function 'smtpmail-send-it)
#+end_src

Configuración del tamaño máximo de columna
#+begin_src emacs-lisp
  (setq message-fill-column 72)
#+end_src

** Cuentas
Definición de las diferentes cuentas de correo electrónico.
#+begin_src emacs-lisp
  (setq mu4e-maildir "~/.mail")
  (setq mu4e-user-mail-address-list '("david@alvarezrosa.com"
                                     "david.alvarez.rosa@yandex.com"))
  ;; Cuenta predeterminada.
  (setq mu4e-inbox-folder "/David/Inbox"
        mu4e-drafts-folder "/David/Drafts"
        mu4e-sent-folder "/David//Sent"
        mu4e-trash-folder "/David/Inbox/Trash"
        user-full-name "David Álvarez Rosa"
        user-mail-address "david@alvarezrosa.com"
        smtpmail-starttls-credentials '(("alvarezrosa.com" 587 nil nil))
        smtpmail-default-smtp-server "alvarezrosa.com"
        smtpmail-smtp-server "alvarezrosa.com"
        smtpmail-smtp-service 587
        mu4e-sent-messages-behavior 'sent)
  (defvar david/mu4e-account-alist
    '(("David"
       (user-full-name "David Álvarez Rosa")
       (mu4e-inbox-folder "/David/Inbox")
       (mu4e-sent-folder "/David/Sent")
       (mu4e-drafts-folder "/David/Drafts")
       (mu4e-trash-folder "/David/Inbox/Trash")
       (smtpmail-stream-type nil)
       (user-mail-address "david@alvarezrosa.com")
       (smtpmail-starttls-credentials '(("alvarezrosa.com" 587 nil nil)))
       (smtpmail-default-smtp-server "alvarezrosa.com")
       (smtpmail-smtp-server "alvarezrosa.com")
       (smtpmail-smtp-service 587)
       (mu4e-sent-messages-behavior sent))
      ("Yandex"
       (user-full-name "David Álvarez Rosa")
       (mu4e-inbox-folder "/Yandex/Inbox")
       (mu4e-sent-folder "/Yandex/Sent")
       (mu4e-drafts-folder "/Yandex/Drafts")
       (mu4e-trash-folder "/Yandex/Trash")
       (smtpmail-stream-type ssl)
       (user-mail-address "david.alvarez.rosa@yandex.com")
       (starttls-use-gnutls t)
       (smtpmail-smtp-server "smtp.yandex.com")
       (smtpmail-smtp-service 465)
       (mu4e-sent-messages-behavior sent))))
#+end_src

Configurar las carpetas dinámicamente (dependiendo de la cuenta de correo).
#+begin_src emacs-lisp
  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ((string-match "^/Yandex.*"
                          (mu4e-message-field msg :maildir))
            "/Yandex/Junk")
           ((string-match "^/david.*"
                          (mu4e-message-field msg :maildir))
           "/David/Inbox/Junk"))))

  (setq mu4e-trash-folder
        (lambda (msg)
          (cond
           ((string-match "^/Yandex.*"
                          (mu4e-message-field msg :maildir))
            "/Yandex/Trash")
           ((string-match "^/david.*"
                          (mu4e-message-field msg :maildir))
           "/David/Inbox/Trash"))))
#+end_src

** Atajos
Añadir atajos de teclado para ir a las diferentes carpetas de las diferentes
cuentas.
#+begin_src emacs-lisp
  (setq mu4e-maildir-shortcuts
        '(("/David/Inbox" . ?i)
          ("/David/Sent" . ?s)
          ("/David/Inbox/Trash" . ?t)
          ("/David/Drafts" . ?d)
          ("/David/Inbox/Junk" . ?j)
          ("/Yandex/Inbox" . ?I)
          ("/Yandex/Sent" . ?S)
          ("/Yandex/Trash" . ?T)
          ("/Yandex/Drafts" . ?D)
          ("/Yandex/Spam" . ?J)
          ("/Yandex/All Mail" . ?A)
          ("/Queue" . ?q)))
#+end_src

Añadir configuraciones personalizadas de marcadores.
#+begin_src emacs-lisp
  (defvar inbox-folders (string-join '("maildir:/David/Inbox"
                                       "maildir:/Yandex/Inbox")
                                     " OR "))

  (defvar draft-folders (string-join '("maildir:/David/Drafts"
                                       "maildir:/Yandex/Drafts")
                                     " OR "))

  (defvar spam-folders (string-join '("maildir:/David/Inbox/Junk"
                                      "maildir:/Yandex/Spam")
                                    " OR "))

  (setq mu4e-bookmarks
  '(("date:today..now" "Today's messages" ?t)
         ("date:7d..now" "Last 7 days" ?w)
         ("flag:flagged" "Flagged" ?f)
         ("mime:image/*" "Messages with images" ?p)
         (spam-folders "All spambuckets" ?S)
         (draft-folders "All drafts" ?d)
         (inbox-folders "All inbox mails" ?i)
         ("flag:unread" "Unread messages" ?u)))
#+end_src

** Correos en cola
Permite guardar los correos en cola (bandeja de salida) para enviarlos más
adelante. Útil cuando se está trabajando sin conexión a internet por ejemplo.
#+begin_src emacs-lisp
  (setq smtpmail-queue-dir "~/.mail/Queue/cur")

  (defun david/toggle-mail-queue ()
    "Permite conmutar entre cola de correos activda o desactivada."
    (interactive)
    (if smtpmail-queue-mail
        (setq smtpmail-queue-mail nil)
        (setq smtpmail-queue-mail t)))
  (define-key mu4e-main-mode-map (kbd "C-c q") 'david/toggle-mail-queue)
#+end_src

** Encriptación
Encriptar todos los correos salientes /automágicamente/ si la llave existe.
#+begin_src emacs-lisp :tangle no
  (defun david/can-encrypt-message-p ()
    "Return non-nil if current message can be encrypted.
  I.e., the keyring has a public key for each recipient."
    (let ((recipients
           (seq-map #'cadr ; only take email address, not recipient name
                    (seq-mapcat (lambda (header)
                                  (let ((header-value
                                         (message-fetch-field header)))
                                    (and header-value
                                         (mail-extract-address-components header-value
                                                                          t))))
                                '("To" "CC" "BCC"))))
          (context (epg-make-context epa-protocol)))
      (seq-every-p (lambda (recipient)
                     (not (seq-empty-p (epg-list-keys context recipient))))
                   recipients)))

  (defun david/add-encryption-mark-if-possible ()
    "Add MML tag to encrypt message when there is a key for each
  recipient."
    (when (david/can-encrypt-message-p)
      (mml-secure-message-sign-encrypt)))

  (add-hook 'message-send-hook #'david/add-encryption-mark-if-possible)
#+end_src

Para firmar correos salientes.
#+begin_src emacs-lisp
  (setq mml-secure-openpgp-sign-with-sender t)
#+end_src

** Autocompletado
Permitir el autocompletado estándar. Y solo tener en cuenta el autocompletado
con los correos de hace como mucho 6 meses.
#+begin_src emacs-lisp
  (setq mu4e-compose-complete-addresses t)
  (setq mu4e-compose-complete-only-after
        (format-time-string
         "%Y-%m-%d"
         (time-subtract (current-time) (days-to-time 150))))
#+end_src

Personalizar el autcompletado de correos (con =M + tab=).
#+begin_src emacs-lisp
  (setq david/contact-file "~/Documents/Contactos/Correos.txt")
  (defun david/read-contact-list ()
    (with-temp-buffer
      (insert-file-contents david/contact-file)
      (split-string (buffer-string) "\n" t)))
  (defun david/complete-emails ()
    (interactive)
    (helm :sources `(((name . "Email address candidates")
                     (candidates . david/read-contact-list)
                     (action . (("insert" . (lambda (x)
                                              (insert
                                               (mapconcat
                                                'identity
                                                (helm-marked-candidates)
                                                ", "))))))))
    :input (word-at-point)
    :buffer "*helm complete email*"))
  (define-key mu4e-compose-mode-map (kbd "<M-tab>") 'david/complete-emails)
#+end_src

** Composición
Usar =C-c x= para pasar a =org-mu4e-compose=, que permite componer correos
usando =org-mode=. Después, convertir el mensaje en =org= a HTML (al enviar).
#+begin_src emacs-lisp
  (require 'org-mu4e)
  (define-key mu4e-compose-mode-map (kbd "C-c x") 'org-mu4e-compose-org-mode)
  (setq org-mu4e-convert-to-html t)
#+end_src

Añadir =org-mime= para poder convertir de =Org= a HTML (para mandar LaTeX como
imágenes por ejemplo).
#+begin_src emacs-lisp
  (use-package org-mime)
  (require 'org-mime)
#+end_src

Añadir automáticamente la firma.
#+begin_src emacs-lisp
  (setq message-signature-file "~/.emacs.d/signature.txt")
  (setq mu4e-compose-signature-auto-include nil)
#+end_src

Activar el autocorrector en español al estar en modo de composición.
#+begin_src emacs-lisp
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda ()
                                      (ispell-change-dictionary "spanish")))
#+end_src


Configurar la línea de cita.

#+begin_src emacs-lisp

  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  (setq message-citation-line-format "On %a %d %b %Y at %R, %f wrote:")
#+end_src


Forzar que no se corten las lineas al enviar los correos.
#+begin_src emacs-lisp :tangle no
  (setq fill-flowed-encode-column 79)
  (setq fill-flowed-display-column 79)

  (add-hook 'mu4e-compose-mode-hook 'enriched-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines 1 'always)))

  (defun david/mu4e-remove-soft-breaks ()
    "Remove the soft breaks that occur with auto-fill-mode."
    (interactive)
    (mu4e-compose-goto-bottom)
    (call-interactively 'set-mark-command)
    (mu4e-compose-goto-top)
    (set-fill-column (point-max))
    (call-interactively 'fill-paragraph)
    (set-fill-column 79))
  (define-key mu4e-compose-mode-map (kbd "C-c s") 'david/mu4e-remove-soft-breaks)
  (define-key mu4e-compose-mode-map (kbd "M-q") 'fill-paragraph)
#+end_src

Configuración para manjear más de una cuenta a la hora de enviar correo. Esta
función es de la documentación de MU4E
([[http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html#Multiple-accounts]]). Siempre
que se quiera componer un nuevo correo, cambiar toda las variables de
configuración relevantes a la cuenta elegida.
#+begin_src emacs-lisp
  (defun david/mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  david/mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) david/mu4e-account-alist)
                               nil t nil nil (caar david/mu4e-account-alist))))
           (account-vars (cdr (assoc account david/mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'david/mu4e-set-account)
#+end_src

** Archivos adjuntos
Configuración el directorio de descarga.
#+begin_src emacs-lisp
  (setq mu4e-attachment-dir "~/Downloads")
#+end_src

Mejorar la gestión de los archivos adjuntos (con =dired=).
#+begin_src emacs-lisp
  (require 'gnus-dired)
  (defun gnus-dired-mail-buffers ()
    "Devuelve una lista de las ventanas con mensajes activos."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))
  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src

Comprobar si se ha adjunto el archivo cuando se debería. TODO: esto no está
funcionando.
#+begin_src emacs-lisp
  (defvar david/message-attachment-regexp
    "\\([Tt]e mando\\|[Tt]e mandamos\\|[Aa]djunto|pdf|[Aa]rchivo\\)")
  (defun david/message-check-attachment nil
    "Comprueba si hay realmente un archivo adjuntado cuando yo lo menciono."
    (save-excursion
      (message-goto-body)
      (when (search-forward-regexp david/message-attachment-regexp nil t nil)
        (message-goto-body)
        (unless (or (search-forward "<#part" nil t nil)
                   (message-y-or-n-p
                    "No attachment. Send the message ?" nil nil))
          (error "No message sent")))))
  (add-hook 'message-send-hook 'david/message-check-attachment)
#+end_src

** Imágenes
Configurar cómo se muestran las imágenes en =mu4e=
#+begin_src emacs-lisp
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
  (setq mu4e-view-show-images t)
#+end_src

** Correos HTML
#+begin_src emacs-lisp
  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  ;;(setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

Hacer más probable el mostrar correos como texto.
#+begin_src emacs-lisp
(setq mu4e-view-html-plaintext-ratio-heuristic  most-positive-fixnum)
;; (setq mu4e-compose-format-flowed t)
#+end_src

** Otros
Configuraciones varias.
#+begin_src emacs-lisp
  ;; Eliminar los 'buffers' de mensajes.
  (setq message-kill-buffer-on-exit t)
  ;; Usar 'U' para actualizar en principal.
  (setq mu4e-get-mail-command "mbsync -a -V")
  ;; Usar 'C-c u' para actualizar (solo indexando).
  (define-key mu4e-headers-mode-map (kbd "C-c u") 'mu4e-update-index)
#+end_src

Usar tabulador para moverse entre links.
#+begin_src emacs-lisp
  (bind-key "<tab>" 'shr-next-link mu4e-view-mode-map)
  (bind-key "<backtab>" 'shr-previous-link mu4e-view-mode-map)
#+end_src

Mostrar las fechas en formato europeo. Y las horas en formato de 24 horas.
#+begin_src emacs-lisp
(setq mu4e-headers-date-format "%d-%m-%Y")
(setq mu4e-headers-time-format "  %H:%M")
#+end_src

No mostrar correos relacionados, esto se puede cambiar con =W=.
#+begin_src emacs-lisp
  (setq mu4e-headers-include-related nil)
#+end_src

Mostrar las direcciones de correo completadas cuando en modo de lectura.
#+begin_src emacs-lisp
(setq mu4e-view-show-addresses t)
#+end_src


* Gestor de suscripciones
Usaremos =elfeed= para gestionar las suscripciones, es un lector de
/feeds/ de RSS y Atom.
#+begin_src emacs-lisp
  (use-package elfeed
    :bind ("C-c e" . 'elfeed)
    :config (setq elfeed-search-date-format '("%d-%m-%Y" 11 :left) ; Fechas formato europeo.
                  ;; Configuraciones varias: directorio de datos, posición, filtro, tamaño.
                  elfeed-db-directory "~/.emacs.d/elfeed"
                  elfeed-search-date-format (quote ("%d-%m-%Y" 11 :left))
                  elfeed-search-filter "@1-week-ago -no "
                  elfeed-search-title-max-width 100))
#+end_src

Automáticamente ajustar a =fill-column= las entradas al abrirlas. Sobreescribe
la función predetermianda.
#+begin_src emacs-lisp
  (setq shr-use-fonts nil)
  (setq shr-width 70)
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun david/elfeed-search-show-entry ()
    "Show elfeed entry and fill the text to fill-column."
    (interactive)
    (elfeed-search-show-entry (elfeed-search-selected :single))
    (read-only-mode 0)
    (mark-whole-buffer)
    (call-interactively 'fill-paragraph))
  (define-key elfeed-search-mode-map (kbd "RET") 'david/elfeed-search-show-entry)
#+end_src

TODO: Actualizar automáticamente al abrir Emacs.
#+begin_src emacs-lisp
  ;; (add-hook 'emacs-startup-hook 'elfeed-update)
#+end_src

** =elfeed-org=
Ayuda a gestionar 'elfeed' con 'org-mode'.
#+begin_src emacs-lisp
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/Suscripciones.org")))
#+end_src

** =elfeed-goodies=
Otro paquete más para =elfeed= (para la interfaz).
#+begin_src emacs-lisp
  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup)
    (setq elfeed-goodies/entry-pane-size 0.38
          elfeed-goodies/entry-pane-position 'right
          elfeed-goodies/feed-source-column-width 18
          elfeed-goodies/tag-column-width 22
          elfeed-goodies/powerline-default-separator nil))
#+end_src

** Funciones
Abrir vídeos de la /feed/ de =elfeed= usando =mpv=.
#+begin_src emacs-lisp
  (defun david/elfeed-play-with-mpv ()
    (interactive)
    (setq entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
    (message "Opening %s with mpv..." (elfeed-entry-link entry))
    (start-process "elfeed-mpv" nil "mpv" "--ytdl-format=[height<=1080]" (elfeed-entry-link entry))
    (elfeed-search-untag-all-unread))
  (define-key elfeed-show-mode-map (kbd "o") 'david/elfeed-play-with-mpv)
  (define-key elfeed-search-mode-map (kbd "o") 'david/elfeed-play-with-mpv)

  (defun david/elfeed-play-with-mpv-with-quality ()
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
          (quality-arg "")
          (quality-val (completing-read "Max height resolution (0 for unlimited): " '("1080" "720" "480" "0") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
        (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry)))
    (elfeed-search-untag-all-unread))
  (define-key elfeed-show-mode-map (kbd "O") 'david/elfeed-play-with-mpv-with-quality)
  (define-key elfeed-search-mode-map (kbd "O") 'david/elfeed-play-with-mpv-with-quality)
#+end_src

Ignorar la entrada actual (concretamente, añadir la TAG =no=).
#+begin_src emacs-lisp
  (defun david/elfeed-ignore ()
    (interactive)
    (setq entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
    (setq tag (intern "no"))
    (elfeed-tag entry tag)
    (elfeed-search-update-entry entry)
    (forward-line))
    ;; (elfeed-search-update--force))
  (define-key elfeed-show-mode-map (kbd "i") 'david/elfeed-ignore)
  (define-key elfeed-search-mode-map (kbd "i") 'david/elfeed-ignore)
#+end_src


* Configuraciones antiguas
** =htmlize=
Convierte un buffer o un archivo a HTML (respetando estilo).
#+begin_src emacs-lisp :tangle no
  (use-package htmlize)
#+end_src

** =calfw=
Calendario en Emacs.
#+begin_src emacs-lisp :tangle no
  (use-package calfw
    :config
    ;; Comenzar las semanas en Lunes.
    (setq calendar-week-start-day 1)
    ;; ;; Dos posibles configuraciones altenativas para el calendario (no funcionan bien).
    ;; (setq cfw:fchar-junction ?╋
    ;;     cfw:fchar-vertical-line ?┃
    ;;     cfw:fchar-horizontal-line ?━
    ;;     cfw:fchar-left-junction ?┣
    ;;     cfw:fchar-right-junction ?┫
    ;;     cfw:fchar-top-junction ?┯
    ;;     cfw:fchar-top-left-corner ?┏
    ;;     cfw:fchar-top-right-corner ?┓)
    ;; (setq cfw:fchar-junction ?╬
    ;;     cfw:fchar-vertical-line ?║
    ;;     cfw:fchar-horizontal-line ?═
    ;;     cfw:fchar-left-junction ?╠
    ;;     cfw:fchar-right-junction ?╣
    ;;     cfw:fchar-top-junction ?╦
    ;;     cfw:fchar-top-left-corner ?╔
    ;;     cfw:fchar-top-right-corner ?╗)
  )
#+end_src

*** =calfw-org=
Mostrar eventos de la agenda en "calfw".
#+begin_src emacs-lisp :tangle no
  (use-package calfw-org
    :config
    ;; (require 'calfw-org)
    ;; Similar exactamente los comandos de la Agenda (de 'org').
    (setq cfw:org-overwrite-default-keybinding t)
    (define-key cfw:calendar-mode-map (kbd "w") 'cfw:change-view-week)
    (define-key cfw:calendar-mode-map (kbd "m") 'cfw:change-view-month)
    (define-key cfw:calendar-mode-map (kbd "W") 'cfw:change-view-two-weeks)
    (global-set-key (kbd "C-c c") 'cfw:open-org-calendar))
#+end_src

** Truncar lineas
No truncar las lineas que no entran en la pantalla.
#+begin_src emacs-lisp :tangle no
  (set-default 'truncate-lines t)
  (setq truncate-partial-width-windows t)
#+end_src

** =ace-window=
Mejorar la gestión de ventanas, especialmente cuando hay más de 2.
#+begin_src emacs-lisp :tangle no
  (use-package ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src


* Final
Despues de iniciar Emacs, volver a cambiar /garbage-collection/.
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
    (setq gc-cons-threshold 800000
          gc-cons-percentage 0.1))
#+end_src

Y volver a cambiar =file-name-handler-alist=.
#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
    (setq file-name-handler-alist david/file-name-handler-alist))
  ;;; config.el ends here
#+end_src























* Pendiente
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c i") (lambda () (interactive)
                                  (erc :server "irc.freenode.net"
                                       :port "6667"
                                       :nick "davidLinux")))

  (setq erc-prompt-for-password nil)
  (setq erc-fill-function 'erc-fill-static)

  ;; (setq erc-fill-static-center 22)

  ;; (require 'erc-join)
  ;; (setq erc-autojoin-channels-alist
  ;;       '(("freenode.net" "#thoughtbot" "#emacs" "#emacsnyc")))
  ;; (erc-autojoin-enable)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq golden-ratio-auto-scale t)

(setf (cdr (assq 'continuation fringe-indicator-alist))
      '(nil nil) ;; no continuation indicators
      ;; '(nil right-curly-arrow) ;; right indicator only
      ;; '(left-curly-arrow nil) ;; left indicator only
      ;; '(left-curly-arrow right-curly-arrow) ;; default
      )

(setf (cdr (assq 'truncation fringe-indicator-alist))
      '(nil nil) ;; no continuation indicators
      )
#+end_src
